const int MAX=1000;
const char charcon='0';
const int IS_PRIME=1,NOT_PRIME=0;
int nums[1000];
char varchar;
int vatint;

int isprime(int n)
{
	int i,result;
	int temp;
	i=2;
	temp=0;
	if(n<+2)
		return(NOT_PRIME);
	if(n==2)
		return(IS_PRIME);
	result=IS_PRIME;
	while(i*i<=n)
	{
		temp=n/i;
		temp=temp*i;
		if(temp==n){
			result=NOT_PRIME;
			i=1+n/i;
		}
		i=i+1;
	}
	return(result);
}

void cal(){
	int i;
	i=MAX-1;
	while(i>=0){
		if(isprime(i)==NOT_PRIME)
			nums[i]=NOT_PRIME;
		else
			nums[i]=IS_PRIME;
		i=-1+i;
	}
	return;
}

int read(){
	int n;
	n=0;
	printf("please input n: ");
	scanf(n);
	if(n>=MAX){
		printf("n is too large, enter a num < ",MAX);
		n=read();
	}
	if(n<=2){
		printf("n is too samll, enter a num > 2");
		n=read();
	}
	return(n);
}

void printWithType(int type,int n){
	int i;
	i=2;
	while(i<=n){
		if(nums[i]==type){
			printf(" ",i);
		}
		i=i+1;
	}
	printf(" ");
}
void read_CMD(){
	char cmd;
	int n,flag;
	cmd='0';
	flag=1;
	while(flag>0){
		flag=0;
		printf("input a for prime and composite nums < n;");
		printf("p for prime;");
		printf("c for composite;"); 
		printf("i to check whether n is prime;");
		printf("input:");
		scanf(cmd);
		switch(cmd){
			case 'a':{
				n=read();
				printf("primes: ");
				printWithType(IS_PRIME,n);
				printf("composite nums: ");
				printWithType(NOT_PRIME,n);
			}
			case 'p':{
				n=read();
				printf("primes: ");
				printWithType(IS_PRIME,n);
			}
			case 'c':{
				printf("not primes: ");
				printWithType(NOT_PRIME,n);
			}
			case 'i':{
				n=read();
				switch(nums[n]){
					case 0:printf("not prime ");
					case 1:printf("is prime ");
				}
			}
			default:{
				flag=1;
				printf("invalid cmd : ",cmd);
			}
		}
		if(flag==0){
			printf("input c to continue, input e to exit: ");
			scanf(cmd);
			if(cmd!='c'){
				printf("exit");
			}else{
				flag=1;
			}
		}
	}
}


void main()
{
	cal();
	read_CMD();
	return;
}