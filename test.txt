const int cintm=10;
const int cint1=1,cint0=0;
const char cchy='y',cchn='n';
const char cch0='0';
const char _mop='*',_aop='+',_sop='-',_dop='/';
const int MAXINT=100000,MININT=-100000;
int vara;
int varm,intarr[10],varn;
char chara,chararr[10],charb;
char charc;

int fib(int n){
    if(n<=cint0){
        return (cint0);
    }
    if(n==cint1){
        return(cint1);
    }
    return (fib(n-1)+fib(n-2));
}


int getint(){
    int temp;
    printf("input a num:");
    scanf(temp);
    return(temp);
}
int sum(int a,int b,int c,int d,int e){
    return (a+b+c+d+e);
}
int empty(){
	return(0);
}

char getch(){
    char ch;
    printf("input a char:");
    scanf(ch);
	printf("");
    return (ch);
}

void cal(){
    int m,n;
    char op;
    printf("input op:(+-*/)");
    scanf(op);
	printf("");
    printf("input arg1 and arg2:");
    scanf(m,n);
    switch (op){
        case '+':{
			printf("arg1+arg2: ",m+n);
            m = (m + n) * (m-n);
        }
        case '*':{
			printf("arg1*arg2: ",m*n);
            m = m * n - m/n;
        }
        case 45:{
			printf("arg1-arg2: ",m-n);
            m = (m + n)/(m-n);
        }
        case 47:{
			printf("arg1/arg2: ",m/n);
            m = m / n+ m * n;
        }
    }
	if(op==_aop)
		printf("(arg1+arg2)*(arg1-arg2): ",m);
	else if(op==_mop)
		printf("arg1*arg2-arg1/arg2: ",m);
	else if(op==_sop)
		printf("(arg1+arg2)/(arg1-arg2): ",m);
	else if(op==_dop)
		printf("arg1/arg2+arg1*arg2: ",m);
	else
		printf("invalid op.");
}

int part(int begin,int end){
	begin=begin;
	end=end;
	vara = intarr[begin];
	varn = vara;
	varm = varn;
	while(begin < end){
		while(intarr[end] >= vara){
			if(begin < end)
				end = end - 1;
			else
				vara = MAXINT;
		}
		intarr[begin] = intarr[end];
		while(intarr[begin] <= varn){
			if(begin < end)
				begin = begin + 1;
			else
				varn = MININT;
		}
		intarr[end] = intarr[begin];
	}
	intarr[begin] = varm;
	return(begin);
}

int qsort(int begin,int end)
{
	int loc;
    if(begin < end){
        loc=part(begin,end);
        qsort(begin,loc-1);
        qsort(loc+1,end);
    }
	return(0);
}

int readArr(char type){
    int i;
    i=0;
    while(i<10){
        if(type=='i')
            intarr[i]=getint();
        else if(type=='c')
            chararr[i]=getch();
        i=i+1;
    }
    return(0);
}

int printArr(int type){
    int i;
    i=0;
    while(i<10){
        if(type)
            printf("",intarr[i]);
        else
            printf("",chararr[i]);
        i=i+1;
    }
    return (0);
}

int getEle(int idx){
    if(idx<0) {
        printf("idx too small.");
        return (0);
    }
    if(idx>=10){
        printf("idx too large.");
        return (0);
    }
    return (intarr[idx]);
}
int getIdx(char ele){
    int i;
    i=0;
    while (i<10){
        if(chararr[i]==ele)
            return (i);
        else
            i=i+1;
    }
	if(i==10)
		i=-1;
    return (i);
}
void arr(){
    printf("input int arr content to sort.");
    readArr('i');
    qsort(0,9);
    printf("int after sort:");
    printArr(1);
    printf("input char arr content.");
    readArr('c');
	printf("char arr content:");
    printArr(0);
    printf("get ele by index:");
    varm=getint();
    printf("int arr ele: ",getEle(varm));
    printf("get index by ele:");
    chara=getch();
    printf("ch index in char arr.",getIdx(chara));
    return;
}

int exp(){
	int i;
    printf("globol const:");
    printf("cint0: ",cint0);
    printf("cint1: ",cint1);
    printf("cchy: ",cchy);
    printf("cchn: ",cchn);
    printf("cch0: ",cch0);
    printf("read global var, three int three char:");
    scanf(vara,varm,varn,chara,charb,charc);
    printf("var1: ",vara);
    printf("var2: ",varm);
    printf("var3: ",varn);
    printf("char1: ",chara);
    printf("char2: ",charb);
    printf("char3: ",charc);
    printf("sum of var int: ",sum(vara,varm,varn,0,0));
    printf("some expr:");
    printf("exp1 --10: ",--10);
    printf("exp2 -10*(-10--4)/4++1*-9--6/-3: ",-10*(-10--4)/4++1*-9--6/-3);
    printf("exp3 -fib(fib(+4)+-1)-+1: ",-fib(fib(+4)+-1)-+1);
    printf("expr with arr:");
    i=0;
    printf("set arr:");
    while(i<5){
        intarr[i]=fib(fib(i)+2)*(i+1);
        printf(" ",intarr[i]);
        i=i+1;
    }
    printf("fib(intarr[3]) ",fib(intarr[3]));
    printf("intarr[fib(2)] ",intarr[fib(2)]);
    printf("intarr[intarr[2]-2] ",intarr[intarr[2]-2]);
	return(0);
}

void main(){
    char cmd;
    int n;
    cmd='a';
    while(cmd!='q'){
        printf("input cmd: a:arr,c:cal,e:empty,f:fib,s:sum,x:exp.q:quit");
        scanf(cmd);
		printf("");
        switch(cmd) {
            case 'a':
                arr();
            case 'c':
                cal();
            case 'e':
                empty();
            case 'f':
                printf(fib(getint()));
            case 's':
                printf(sum(getint(), getint(), getint(), getint(), getint()));
            case 'x':
                exp();
            case 'q':
                return;
            default:
                printf(" invalid cmd. ");
        }
    }
}