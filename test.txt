CONSTSY   :		const
INTSY     :		int
IDENT     :		max
BECOME    :		=
UNSIGNUM  :		1000
		this is a num.
		this is const def.
SEMICOLON :		;
CONSTSY   :		const
CHARSY    :		char
IDENT     :		charcon
BECOME    :		=
CHARCON   :		'0'
		this is const def.
SEMICOLON :		;
CONSTSY   :		const
INTSY     :		int
IDENT     :		is_prime
BECOME    :		=
UNSIGNUM  :		1
		this is a num.
COMMA     :		,
IDENT     :		not_prime
BECOME    :		=
ZERO      :		0
		this is a num.
		this is const def.
SEMICOLON :		;
		this is dec of const.
INTSY     :		int
IDENT     :		nums
LBRACK    :		[
UNSIGNUM  :		1000
RBRACK    :		]
		this is var def.
SEMICOLON :		;
CHARSY    :		char
IDENT     :		varchar
		this is var def.
SEMICOLON :		;
INTSY     :		int
IDENT     :		vatint
		this is var def.
SEMICOLON :		;
		this is dec of var.
INTSY     :		int
IDENT     :		isprime
LPARENT   :		(
INTSY     :		int
IDENT     :		n
		this is para list.
RPARENT   :		)
LBRACE    :		{
INTSY     :		int
IDENT     :		i
COMMA     :		,
IDENT     :		result
		this is var def.
SEMICOLON :		;
INTSY     :		int
IDENT     :		temp
		this is var def.
SEMICOLON :		;
		this is dec of var.
IDENT     :		i
BECOME    :		=
UNSIGNUM  :		2
		this is a num.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
IDENT     :		temp
BECOME    :		=
ZERO      :		0
		this is a num.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
IFSY      :		if
LPARENT   :		(
IDENT     :		n
		this is a factor.
		this is a term.
		this is an expr.
LES       :		<
PLUS      :		+
UNSIGNUM  :		2
		this is a num.
		this is a factor.
		this is a term.
		this is an expr.
		this is a condition.
RPARENT   :		)
RETURNSY  :		return
LPARENT   :		(
IDENT     :		not_prime
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a return stat.
SEMICOLON :		;
		this is a stat.
		this is an if stat.
		this is a stat.
IFSY      :		if
LPARENT   :		(
IDENT     :		n
		this is a factor.
		this is a term.
		this is an expr.
EQL       :		==
UNSIGNUM  :		2
		this is a num.
		this is a factor.
		this is a term.
		this is an expr.
		this is a condition.
RPARENT   :		)
RETURNSY  :		return
LPARENT   :		(
IDENT     :		is_prime
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a return stat.
SEMICOLON :		;
		this is a stat.
		this is an if stat.
		this is a stat.
IDENT     :		result
BECOME    :		=
IDENT     :		is_prime
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
WHILESY   :		while
LPARENT   :		(
IDENT     :		i
		this is a factor.
MUL       :		*
IDENT     :		i
		this is a factor.
		this is a term.
		this is an expr.
LEQ       :		<=
IDENT     :		n
		this is a factor.
		this is a term.
		this is an expr.
		this is a condition.
RPARENT   :		)
LBRACE    :		{
IDENT     :		temp
BECOME    :		=
IDENT     :		n
		this is a factor.
DIVD      :		/
IDENT     :		i
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
IDENT     :		temp
BECOME    :		=
IDENT     :		temp
		this is a factor.
MUL       :		*
IDENT     :		i
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
IFSY      :		if
LPARENT   :		(
IDENT     :		temp
		this is a factor.
		this is a term.
		this is an expr.
EQL       :		==
IDENT     :		n
		this is a factor.
		this is a term.
		this is an expr.
		this is a condition.
RPARENT   :		)
LBRACE    :		{
IDENT     :		result
BECOME    :		=
IDENT     :		not_prime
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
IDENT     :		i
BECOME    :		=
UNSIGNUM  :		1
		this is a num.
		this is a factor.
		this is a term.
PLUS      :		+
IDENT     :		n
		this is a factor.
DIVD      :		/
IDENT     :		i
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is an if stat.
		this is a stat.
IDENT     :		i
BECOME    :		=
IDENT     :		i
		this is a factor.
		this is a term.
PLUS      :		+
UNSIGNUM  :		1
		this is a num.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a while stat.
		this is a stat.
RETURNSY  :		return
LPARENT   :		(
IDENT     :		result
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a return stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
		this is complex stat.
RBRACE    :		}
		this is a ret func dec.
VOIDSY    :		void
IDENT     :		cal
LPARENT   :		(
		this is para list.
RPARENT   :		)
LBRACE    :		{
INTSY     :		int
IDENT     :		i
		this is var def.
SEMICOLON :		;
		this is dec of var.
IDENT     :		i
BECOME    :		=
IDENT     :		max
		this is a factor.
		this is a term.
MINUS     :		-
UNSIGNUM  :		1
		this is a num.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
WHILESY   :		while
LPARENT   :		(
IDENT     :		i
		this is a factor.
		this is a term.
		this is an expr.
GEQ       :		>=
ZERO      :		0
		this is a num.
		this is a factor.
		this is a term.
		this is an expr.
		this is a condition.
RPARENT   :		)
LBRACE    :		{
IFSY      :		if
LPARENT   :		(
IDENT     :		isprime
LPARENT   :		(
IDENT     :		i
		this is a factor.
		this is a term.
		this is an expr.
		this is value para list.
RPARENT   :		)
		this is a call stat.
		this is a factor.
		this is a term.
		this is an expr.
EQL       :		==
IDENT     :		not_prime
		this is a factor.
		this is a term.
		this is an expr.
		this is a condition.
RPARENT   :		)
IDENT     :		nums
LBRACK    :		[
IDENT     :		i
		this is a factor.
		this is a term.
		this is an expr.
RBRACK    :		]
BECOME    :		=
IDENT     :		not_prime
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
ELSESY    :		else
IDENT     :		nums
LBRACK    :		[
IDENT     :		i
		this is a factor.
		this is a term.
		this is an expr.
RBRACK    :		]
BECOME    :		=
IDENT     :		is_prime
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is an if stat.
		this is a stat.
IDENT     :		i
BECOME    :		=
MINUS     :		-
UNSIGNUM  :		1
		this is a num.
		this is a factor.
		this is a term.
PLUS      :		+
IDENT     :		i
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a while stat.
		this is a stat.
RETURNSY  :		return
		this is a return stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
		this is complex stat.
RBRACE    :		}
		this is a void func dec.
INTSY     :		int
IDENT     :		read
LPARENT   :		(
		this is para list.
RPARENT   :		)
LBRACE    :		{
INTSY     :		int
IDENT     :		n
		this is var def.
SEMICOLON :		;
		this is dec of var.
IDENT     :		n
BECOME    :		=
ZERO      :		0
		this is a num.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		"please input n: "
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
SCANFSY   :		scanf
LPARENT   :		(
IDENT     :		n
RPARENT   :		)
		this is a read stat.
SEMICOLON :		;
		this is a stat.
IFSY      :		if
LPARENT   :		(
IDENT     :		n
		this is a factor.
		this is a term.
		this is an expr.
GEQ       :		>=
IDENT     :		max
		this is a factor.
		this is a term.
		this is an expr.
		this is a condition.
RPARENT   :		)
LBRACE    :		{
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		"n is too large, enter a num < "
COMMA     :		,
IDENT     :		max
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
IDENT     :		n
BECOME    :		=
IDENT     :		read
LPARENT   :		(
		this is value para list.
RPARENT   :		)
		this is a call stat.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is an if stat.
		this is a stat.
IFSY      :		if
LPARENT   :		(
IDENT     :		n
		this is a factor.
		this is a term.
		this is an expr.
LEQ       :		<=
UNSIGNUM  :		2
		this is a num.
		this is a factor.
		this is a term.
		this is an expr.
		this is a condition.
RPARENT   :		)
LBRACE    :		{
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		"n is too samll, enter a num > 2"
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
IDENT     :		n
BECOME    :		=
IDENT     :		read
LPARENT   :		(
		this is value para list.
RPARENT   :		)
		this is a call stat.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is an if stat.
		this is a stat.
RETURNSY  :		return
LPARENT   :		(
IDENT     :		n
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a return stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
		this is complex stat.
RBRACE    :		}
		this is a ret func dec.
VOIDSY    :		void
IDENT     :		printwithtype
LPARENT   :		(
INTSY     :		int
IDENT     :		type
COMMA     :		,
INTSY     :		int
IDENT     :		n
		this is para list.
RPARENT   :		)
LBRACE    :		{
INTSY     :		int
IDENT     :		i
		this is var def.
SEMICOLON :		;
		this is dec of var.
IDENT     :		i
BECOME    :		=
UNSIGNUM  :		2
		this is a num.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
WHILESY   :		while
LPARENT   :		(
IDENT     :		i
		this is a factor.
		this is a term.
		this is an expr.
LEQ       :		<=
IDENT     :		n
		this is a factor.
		this is a term.
		this is an expr.
		this is a condition.
RPARENT   :		)
LBRACE    :		{
IFSY      :		if
LPARENT   :		(
IDENT     :		nums
LBRACK    :		[
IDENT     :		i
		this is a factor.
		this is a term.
		this is an expr.
RBRACK    :		]
		this is a factor.
		this is a term.
		this is an expr.
EQL       :		==
IDENT     :		type
		this is a factor.
		this is a term.
		this is an expr.
		this is a condition.
RPARENT   :		)
LBRACE    :		{
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" "
COMMA     :		,
IDENT     :		i
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is an if stat.
		this is a stat.
IDENT     :		i
BECOME    :		=
IDENT     :		i
		this is a factor.
		this is a term.
PLUS      :		+
UNSIGNUM  :		1
		this is a num.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a while stat.
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" "
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
		this is complex stat.
RBRACE    :		}
		this is a void func dec.
VOIDSY    :		void
IDENT     :		read_cmd
LPARENT   :		(
		this is para list.
RPARENT   :		)
LBRACE    :		{
CHARSY    :		char
IDENT     :		cmd
		this is var def.
SEMICOLON :		;
INTSY     :		int
IDENT     :		n
COMMA     :		,
IDENT     :		flag
		this is var def.
SEMICOLON :		;
		this is dec of var.
IDENT     :		cmd
BECOME    :		=
CHARCON   :		'0'
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
IDENT     :		flag
BECOME    :		=
UNSIGNUM  :		1
		this is a num.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
WHILESY   :		while
LPARENT   :		(
IDENT     :		flag
		this is a factor.
		this is a term.
		this is an expr.
GTR       :		>
ZERO      :		0
		this is a num.
		this is a factor.
		this is a term.
		this is an expr.
		this is a condition.
RPARENT   :		)
LBRACE    :		{
IDENT     :		flag
BECOME    :		=
ZERO      :		0
		this is a num.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		"input a for prime and composite nums < n;"
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		"p for prime;"
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		"c for composite;"
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		"i to check whether n is prime;"
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		"input:"
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
SCANFSY   :		scanf
LPARENT   :		(
IDENT     :		cmd
RPARENT   :		)
		this is a read stat.
SEMICOLON :		;
		this is a stat.
SWITCHSY  :		switch
LPARENT   :		(
IDENT     :		cmd
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
LBRACE    :		{
CASESY    :		case
CHARCON   :		'a'
COLON     :		:
LBRACE    :		{
IDENT     :		n
BECOME    :		=
IDENT     :		read
LPARENT   :		(
		this is value para list.
RPARENT   :		)
		this is a call stat.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		"primes: "
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
IDENT     :		printwithtype
LPARENT   :		(
IDENT     :		is_prime
		this is a factor.
		this is a term.
		this is an expr.
COMMA     :		,
IDENT     :		n
		this is a factor.
		this is a term.
		this is an expr.
		this is value para list.
RPARENT   :		)
		this is a call stat.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		"composite nums: "
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
IDENT     :		printwithtype
LPARENT   :		(
IDENT     :		not_prime
		this is a factor.
		this is a term.
		this is an expr.
COMMA     :		,
IDENT     :		n
		this is a factor.
		this is a term.
		this is an expr.
		this is value para list.
RPARENT   :		)
		this is a call stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a one case.
CASESY    :		case
CHARCON   :		'p'
COLON     :		:
LBRACE    :		{
IDENT     :		n
BECOME    :		=
IDENT     :		read
LPARENT   :		(
		this is value para list.
RPARENT   :		)
		this is a call stat.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		"primes: "
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
IDENT     :		printwithtype
LPARENT   :		(
IDENT     :		is_prime
		this is a factor.
		this is a term.
		this is an expr.
COMMA     :		,
IDENT     :		n
		this is a factor.
		this is a term.
		this is an expr.
		this is value para list.
RPARENT   :		)
		this is a call stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a one case.
CASESY    :		case
CHARCON   :		'c'
COLON     :		:
LBRACE    :		{
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		"not primes: "
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
IDENT     :		printwithtype
LPARENT   :		(
IDENT     :		not_prime
		this is a factor.
		this is a term.
		this is an expr.
COMMA     :		,
IDENT     :		n
		this is a factor.
		this is a term.
		this is an expr.
		this is value para list.
RPARENT   :		)
		this is a call stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a one case.
CASESY    :		case
CHARCON   :		'i'
COLON     :		:
LBRACE    :		{
IDENT     :		n
BECOME    :		=
IDENT     :		read
LPARENT   :		(
		this is value para list.
RPARENT   :		)
		this is a call stat.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
SWITCHSY  :		switch
LPARENT   :		(
IDENT     :		nums
LBRACK    :		[
IDENT     :		n
		this is a factor.
		this is a term.
		this is an expr.
RBRACK    :		]
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
LBRACE    :		{
CASESY    :		case
ZERO      :		0
		this is a num.
COLON     :		:
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		"not prime "
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
		this is a one case.
CASESY    :		case
UNSIGNUM  :		1
		this is a num.
COLON     :		:
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		"is prime "
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
		this is a one case.
		this is a case table.
RBRACE    :		}
		this is a switch stat.
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a one case.
		this is a case table.
DEFAULTSY :		default
COLON     :		:
LBRACE    :		{
IDENT     :		flag
BECOME    :		=
UNSIGNUM  :		1
		this is a num.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		"invalid cmd : "
COMMA     :		,
IDENT     :		cmd
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a default case.
RBRACE    :		}
		this is a switch stat.
		this is a stat.
IFSY      :		if
LPARENT   :		(
IDENT     :		flag
		this is a factor.
		this is a term.
		this is an expr.
EQL       :		==
ZERO      :		0
		this is a num.
		this is a factor.
		this is a term.
		this is an expr.
		this is a condition.
RPARENT   :		)
LBRACE    :		{
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		"input c to continue, input e to exit: "
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
SCANFSY   :		scanf
LPARENT   :		(
IDENT     :		cmd
RPARENT   :		)
		this is a read stat.
SEMICOLON :		;
		this is a stat.
IFSY      :		if
LPARENT   :		(
IDENT     :		cmd
		this is a factor.
		this is a term.
		this is an expr.
NEQ       :		!=
CHARCON   :		'c'
		this is a factor.
		this is a term.
		this is an expr.
		this is a condition.
RPARENT   :		)
LBRACE    :		{
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		"exit"
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
ELSESY    :		else
LBRACE    :		{
IDENT     :		flag
BECOME    :		=
UNSIGNUM  :		1
		this is a num.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is an if stat.
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is an if stat.
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a while stat.
		this is a stat.
		this is a stat list.
		this is complex stat.
RBRACE    :		}
		this is a void func dec.
VOIDSY    :		void
MAINSY    :		main
LPARENT   :		(
RPARENT   :		)
LBRACE    :		{
IDENT     :		cal
LPARENT   :		(
		this is value para list.
RPARENT   :		)
		this is a call stat.
SEMICOLON :		;
		this is a stat.
IDENT     :		read_cmd
LPARENT   :		(
		this is value para list.
RPARENT   :		)
		this is a call stat.
SEMICOLON :		;
		this is a stat.
RETURNSY  :		return
		this is a return stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
		this is complex stat.
RBRACE    :		}
		this is main func dec.
		this is a program.
