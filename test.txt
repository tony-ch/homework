const int cintm=10;
const int cint1=1,cint0=0;
const char cchy='y',cchn='n';
const char cch0='0';
int vara;
int varm,intarr[10],varn;
char chara,chararr[10],charb;
char charc;

int fib(int n){
    if(n<=cint0){
        return (cint0);
    }
    if(n==cint1){
        return(cint1);
    }
    return (fib(n-1)+fib(n-2));
}


int getint(){
    int temp;
    printf(" input a num: ");
    scanf(temp);
    return(temp);
}
int sum(int a,int b,int c,int d,int e){
    return (a+b+c+d+e);
}
void empty(){

}

char getch(){
    char ch;
    printf(" input a char: ");
    scanf(ch);
    return (ch);
}

void cal(){
    int m,n,i;
    char op;
    printf("globol const: ");
    printf(" cint0 ",cint0);
    printf(" cint1 ",cint1);
    printf(" cchy ",cchy);
    printf(" cchn ",cchn);
    printf(" cch0 ",cch0);
    printf("read global var, three int three char:");
    scanf(vara,varm,varn,chara,charb,charc);
    printf(" var1 ",vara);
    printf(" var2 ",varm);
    printf(" var3 ",varn);
    printf(" char1 ",chara);
    printf(" char2 ",charb);
    printf(" char3 ",charc);
    printf(" sum of var int: ",sum(vara,varm,varn,0,0));


    printf(" some expr: ");
    printf(" exp1 --10: ",--10);
    printf(" exp2 -10*(-10--4)/4++1*-9--6/-3: ",-10*(-10--4)/4++1*-9--6/-3);
    printf(" exp3 -fib(fib(+4)+-1)-+1: ",-fib(fib(+4)+-1)-+1);
    printf(" expr with arr ");
    i=0;
    printf(" set arr ");
    while(i<5){
        intarr[i]=fib(fib(i)+2)*(i+1);
        printf(" ",intarr[i]);
        i=i+1;
    }
    printf(" fib(intarr[3]) ",fib(intarr[3]));
    printf(" intarr[fib(2)] ",intarr[fib(2)]);
    printf(" intarr[intarr[2]-2] ",intarr[intarr[2]-2]);

    printf("input arg1: ");
    scanf(m);
    op='+';
    while(op!='q'){
        printf(" input op:(+-*/)(q:end) ");
        scanf(op);
        switch (op){
            case '+':{
                printf(" input arg2");
                scanf(n);
                m = m + n;
            }
            case '*':{
                printf(" input arg2");
                scanf(n);
                m = m * n;
            }
            case 45:{
                printf(" input arg2");
                scanf(n);
                m = m - n;
            }
            case 47:{
                printf(" input arg2");
                scanf(n);
                m = m / n;
            }
            case 'q':{
                return;
            }
        }
        printf("result: ",m);
    }
}

int partition(char type,int low,int high){
    int pivot,cond1,cond2,i;
    char chpivot;
    cond1=0;
    cond2=0;
    if(type=='i')
        pivot=intarr[low];
    else
        chpivot=chararr[low];
    while(low<high){
        i=0;
        if(low<high)
            cond1=1;
        else
            cond1=0;
        if(type=='i'){
            if(intarr[high]>=pivot)
                cond2=1;
            else
                cond2=0;
        } else{
            if(chararr[high]>=chpivot)
                cond2=1;
            else
                cond2=0;
        }
        while(cond1+cond2==2){
            high=high-1;
            if(low<high)
                cond1=1;
            else
                cond1=0;
            if(type=='i'){
                if(intarr[high]>=pivot)
                    cond2=1;
                else
                    cond2=0;
            } else{
                if(chararr[high]>=chpivot)
                    cond2=1;
                else
                    cond2=0;
            }
        }
        if(type=='i')
            intarr[low]=intarr[high];
        else
            chararr[low]=chararr[high];
        cond1=0;cond2=0;
        if(low<high)
            cond1=1;
        else
            cond1=0;
        if(type=='i'){
            if(intarr[low]<=pivot)
                cond2=1;
            else
                cond2=0;
        }else{
            if(chararr[low]<=chpivot)
                cond2=1;
            else
                cond2=0;
        }
        while(cond1+cond2==2){
            low=low+1;
            if(low<high)
                cond1=1;
            else
                cond1=0;
            if(type=='i'){
                if(intarr[low]<=pivot)
                    cond2=1;
                else
                    cond2=0;
            }else{
                if(chararr[low]<=chpivot)
                    cond2=1;
                else
                    cond2=0;
            }
        }
        if(type=='i'){
            intarr[high]=intarr[low];
        } else{
            chararr[high]=chararr[low];
        }
    }
    if(type=='i'){
        intarr[low]=pivot;
    } else{
        chararr[low]=chpivot;
    }
    return (low);
}

void qsort(char type,int low,int high){
    int loc;
    loc=0;
    if(low<high){
        loc=partition(type,low,high);
        qsort(type,low,loc-1);
        qsort(type,loc+1,high);
    }
    return;
}

void arr(){
    int i;
    char type;
    printf(" int arr(i) or char arr(c)? input i or c ");
    scanf(type);
    if(type=='i'){
        printf(" input int arr content to sort. ");
        i=0;
        while(i<10){
            intarr[i]=getint();
            i=i+1;
        }
        qsort('i',0,9);
        printf(" int after sort: ");
        i=0;
        while(i<10){
            printf(" ",intarr[i]);
            i=i+1;
        }
    }else if(type=='c'){
        printf(" input char arr content to sort. ");
        i=0;
        while(i<10){
            chararr[i]=getch();
            i=i+1;
        }
        qsort('c',0,9);
        printf(" char after sort: ");
        i=0;
        while(i<10){
            printf(" ",chararr[i]);
            i=i+1;
        }
    }else{
        printf(" invalid input. ");
    }
    return;
}


void main(){
    char cmd;
    int n;
    cmd='+';
    while(cmd!='q'){
        printf(" input cmd: a:arr,c:cal,e:empty,f:fib,s:sum,q:quit ");
        scanf(cmd);
        switch(cmd){
            case 'a':{
                arr();
            }
            case 'c':{
                cal();
            }
            case 'e':{
                empty();
            }
            case 'f':{
                printf(fib(getint()));
            }
            case 's':{
                printf(sum(getint(),getint(),getint(),getint(),getint()));
            }
            case 'q':{
                return;
            }
            default:{
                printf(" invalid cmd. ");
            }
        }
    }
}
