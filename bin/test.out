CONSTSY   :		const
INTSY     :		int
IDENT     :		cintm
BECOME    :		=
UNSIGNUM  :		10
		this is a num:10.
		enter tab index: 0, name: cintm, kind: const, type: int, value: 10, adr:0
		this is const def.
SEMICOLON :		;
CONSTSY   :		const
INTSY     :		int
IDENT     :		cint1
BECOME    :		=
UNSIGNUM  :		1
		this is a num:1.
		enter tab index: 1, name: cint1, kind: const, type: int, value: 1, adr:1
COMMA     :		,
IDENT     :		cint0
BECOME    :		=
ZERO      :		0
		this is a num:0.
		enter tab index: 2, name: cint0, kind: const, type: int, value: 0, adr:2
		this is const def.
SEMICOLON :		;
CONSTSY   :		const
CHARSY    :		char
IDENT     :		cchy
BECOME    :		=
		enter tab index: 3, name: cchy, kind: const, type: char, value: 121, adr:3
CHARCON   :		'y'
COMMA     :		,
IDENT     :		cchn
BECOME    :		=
		enter tab index: 4, name: cchn, kind: const, type: char, value: 110, adr:4
CHARCON   :		'n'
		this is const def.
SEMICOLON :		;
CONSTSY   :		const
CHARSY    :		char
IDENT     :		cch0
BECOME    :		=
		enter tab index: 5, name: cch0, kind: const, type: char, value: 48, adr:5
CHARCON   :		'0'
		this is const def.
SEMICOLON :		;
		this is dec of const.
INTSY     :		int
IDENT     :		vara
		enter tab index: 6, name: vara, kind: var, type: int, value: 1, adr:6
		this is var def.
SEMICOLON :		;
INTSY     :		int
IDENT     :		varm
		enter tab index: 7, name: varm, kind: var, type: int, value: 1, adr:7
COMMA     :		,
IDENT     :		intarr
LBRACK    :		[
UNSIGNUM  :		10
RBRACK    :		]
		enter tab index: 8, name: intarr, kind: arr, type: int, value: 10, adr:8
COMMA     :		,
IDENT     :		varn
		enter tab index: 9, name: varn, kind: var, type: int, value: 1, adr:18
		this is var def.
SEMICOLON :		;
CHARSY    :		char
IDENT     :		chara
		enter tab index: 10, name: chara, kind: var, type: char, value: 1, adr:19
COMMA     :		,
IDENT     :		chararr
LBRACK    :		[
UNSIGNUM  :		10
RBRACK    :		]
		enter tab index: 11, name: chararr, kind: arr, type: char, value: 10, adr:20
COMMA     :		,
IDENT     :		charb
		enter tab index: 12, name: charb, kind: var, type: char, value: 1, adr:30
		this is var def.
SEMICOLON :		;
CHARSY    :		char
IDENT     :		charc
		enter tab index: 13, name: charc, kind: var, type: char, value: 1, adr:31
		this is var def.
SEMICOLON :		;
		this is dec of var.
INTSY     :		int
		enter tab index: 14, name: fib, kind: func, type: int, value: 0, adr:32
		enter btab index: 0, name: fib, tidx: 14, spacesz:0, paraN:0
IDENT     :		fib
LPARENT   :		(
INTSY     :		int
		enter tab index: 15, name: n, kind: para, type: int, value: 0, adr:0
IDENT     :		n
		this is para list.
		enter para num for func fib, para num: 1
RPARENT   :		)
LBRACE    :		{
IFSY      :		if
LPARENT   :		(
IDENT     :		n
		this is a factor.
		this is a term.
		this is an expr.
LEQ       :		<=
IDENT     :		cint0
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 16, name: &0, kind: var, type: int, value: 0, adr:14
		this is a condition.
RPARENT   :		)
LBRACE    :		{
RETURNSY  :		return
LPARENT   :		(
IDENT     :		cint0
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a return stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is an if stat.
		this is a stat.
IFSY      :		if
LPARENT   :		(
IDENT     :		n
		this is a factor.
		this is a term.
		this is an expr.
EQL       :		==
IDENT     :		cint1
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 17, name: &1, kind: var, type: int, value: 0, adr:15
		this is a condition.
RPARENT   :		)
LBRACE    :		{
RETURNSY  :		return
LPARENT   :		(
IDENT     :		cint1
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a return stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is an if stat.
		this is a stat.
RETURNSY  :		return
LPARENT   :		(
IDENT     :		fib
		enter tab index: 18, name: &2, kind: var, type: int, value: 0, adr:16
LPARENT   :		(
IDENT     :		n
		this is a factor.
		this is a term.
MINUS     :		-
		enter tab index: 19, name: &3, kind: var, type: int, value: 0, adr:17
UNSIGNUM  :		1
		this is a num:1.
		this is a factor.
		this is a term.
		enter tab index: 20, name: &4, kind: var, type: int, value: 0, adr:18
		this is an expr.
		this is value para list.
RPARENT   :		)
		this is a call stat.
		this is a term.
PLUS      :		+
IDENT     :		fib
		enter tab index: 21, name: &5, kind: var, type: int, value: 0, adr:19
LPARENT   :		(
IDENT     :		n
		this is a factor.
		this is a term.
MINUS     :		-
		enter tab index: 22, name: &6, kind: var, type: int, value: 0, adr:20
UNSIGNUM  :		2
		this is a num:2.
		this is a factor.
		this is a term.
		enter tab index: 23, name: &7, kind: var, type: int, value: 0, adr:21
		this is an expr.
		this is value para list.
RPARENT   :		)
		this is a call stat.
		this is a term.
		enter tab index: 24, name: &8, kind: var, type: int, value: 0, adr:22
		this is an expr.
RPARENT   :		)
		this is a return stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
		this is complex stat.
RBRACE    :		}
		this is a ret func dec.
INTSY     :		int
		enter tab index: 25, name: getint, kind: func, type: int, value: 0, adr:23
		enter btab index: 1, name: getint, tidx: 25, spacesz:0, paraN:0
IDENT     :		getint
LPARENT   :		(
		this is para list.
		enter para num for func getint, para num: 0
RPARENT   :		)
LBRACE    :		{
INTSY     :		int
IDENT     :		temp
		enter tab index: 26, name: temp, kind: var, type: int, value: 1, adr:14
		this is var def.
SEMICOLON :		;
		this is dec of var.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" input a num: "
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
SCANFSY   :		scanf
LPARENT   :		(
IDENT     :		temp
RPARENT   :		)
		this is a read stat.
SEMICOLON :		;
		this is a stat.
RETURNSY  :		return
LPARENT   :		(
IDENT     :		temp
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a return stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
		this is complex stat.
RBRACE    :		}
		this is a ret func dec.
INTSY     :		int
		enter tab index: 27, name: sum, kind: func, type: int, value: 0, adr:15
		enter btab index: 2, name: sum, tidx: 27, spacesz:0, paraN:0
IDENT     :		sum
LPARENT   :		(
INTSY     :		int
		enter tab index: 28, name: a, kind: para, type: int, value: 0, adr:0
IDENT     :		a
COMMA     :		,
INTSY     :		int
		enter tab index: 29, name: b, kind: para, type: int, value: 0, adr:1
IDENT     :		b
COMMA     :		,
INTSY     :		int
		enter tab index: 30, name: c, kind: para, type: int, value: 0, adr:2
IDENT     :		c
COMMA     :		,
INTSY     :		int
		enter tab index: 31, name: d, kind: para, type: int, value: 0, adr:3
IDENT     :		d
COMMA     :		,
INTSY     :		int
		enter tab index: 32, name: e, kind: para, type: int, value: 0, adr:4
IDENT     :		e
		this is para list.
		enter para num for func sum, para num: 5
RPARENT   :		)
LBRACE    :		{
RETURNSY  :		return
LPARENT   :		(
IDENT     :		a
		this is a factor.
		this is a term.
PLUS      :		+
IDENT     :		b
		this is a factor.
		this is a term.
		enter tab index: 33, name: &9, kind: var, type: int, value: 0, adr:14
PLUS      :		+
IDENT     :		c
		this is a factor.
		this is a term.
		enter tab index: 34, name: &10, kind: var, type: int, value: 0, adr:15
PLUS      :		+
IDENT     :		d
		this is a factor.
		this is a term.
		enter tab index: 35, name: &11, kind: var, type: int, value: 0, adr:16
PLUS      :		+
IDENT     :		e
		this is a factor.
		this is a term.
		enter tab index: 36, name: &12, kind: var, type: int, value: 0, adr:17
		this is an expr.
RPARENT   :		)
		this is a return stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
		this is complex stat.
RBRACE    :		}
		this is a ret func dec.
VOIDSY    :		void
		enter tab index: 37, name: empty, kind: func, type: void, value: 0, adr:18
		enter btab index: 3, name: empty, tidx: 37, spacesz:0, paraN:0
IDENT     :		empty
LPARENT   :		(
		this is para list.
		enter para num for func empty, para num: 0
RPARENT   :		)
LBRACE    :		{
		this is a stat list.
		this is complex stat.
RBRACE    :		}
		this is a void func dec.
CHARSY    :		char
		enter tab index: 38, name: getch, kind: func, type: char, value: 0, adr:14
		enter btab index: 4, name: getch, tidx: 38, spacesz:0, paraN:0
IDENT     :		getch
LPARENT   :		(
		this is para list.
		enter para num for func getch, para num: 0
RPARENT   :		)
LBRACE    :		{
CHARSY    :		char
IDENT     :		ch
		enter tab index: 39, name: ch, kind: var, type: char, value: 1, adr:14
		this is var def.
SEMICOLON :		;
		this is dec of var.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" input a char: "
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
SCANFSY   :		scanf
LPARENT   :		(
IDENT     :		ch
RPARENT   :		)
		this is a read stat.
SEMICOLON :		;
		this is a stat.
RETURNSY  :		return
LPARENT   :		(
IDENT     :		ch
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a return stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
		this is complex stat.
RBRACE    :		}
		this is a ret func dec.
VOIDSY    :		void
		enter tab index: 40, name: cal, kind: func, type: void, value: 0, adr:15
		enter btab index: 5, name: cal, tidx: 40, spacesz:0, paraN:0
IDENT     :		cal
LPARENT   :		(
		this is para list.
		enter para num for func cal, para num: 0
RPARENT   :		)
LBRACE    :		{
INTSY     :		int
IDENT     :		m
		enter tab index: 41, name: m, kind: var, type: int, value: 1, adr:14
COMMA     :		,
IDENT     :		n
		enter tab index: 42, name: n, kind: var, type: int, value: 1, adr:15
COMMA     :		,
IDENT     :		i
		enter tab index: 43, name: i, kind: var, type: int, value: 1, adr:16
		this is var def.
SEMICOLON :		;
CHARSY    :		char
IDENT     :		op
		enter tab index: 44, name: op, kind: var, type: char, value: 1, adr:17
		this is var def.
SEMICOLON :		;
		this is dec of var.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		"globol const: "
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" cint0 "
COMMA     :		,
IDENT     :		cint0
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" cint1 "
COMMA     :		,
IDENT     :		cint1
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" cchy "
COMMA     :		,
IDENT     :		cchy
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" cchn "
COMMA     :		,
IDENT     :		cchn
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" cch0 "
COMMA     :		,
IDENT     :		cch0
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		"read global var, three int three char:"
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
SCANFSY   :		scanf
LPARENT   :		(
IDENT     :		vara
COMMA     :		,
IDENT     :		varm
COMMA     :		,
IDENT     :		varn
COMMA     :		,
IDENT     :		chara
COMMA     :		,
IDENT     :		charb
COMMA     :		,
IDENT     :		charc
RPARENT   :		)
		this is a read stat.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" var1 "
COMMA     :		,
IDENT     :		vara
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" var2 "
COMMA     :		,
IDENT     :		varm
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" var3 "
COMMA     :		,
IDENT     :		varn
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" char1 "
COMMA     :		,
IDENT     :		chara
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" char2 "
COMMA     :		,
IDENT     :		charb
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" char3 "
COMMA     :		,
IDENT     :		charc
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" sum of var int: "
COMMA     :		,
IDENT     :		sum
		enter tab index: 45, name: &13, kind: var, type: int, value: 0, adr:18
LPARENT   :		(
IDENT     :		vara
		this is a factor.
		this is a term.
		this is an expr.
COMMA     :		,
IDENT     :		varm
		this is a factor.
		this is a term.
		this is an expr.
COMMA     :		,
IDENT     :		varn
		this is a factor.
		this is a term.
		this is an expr.
COMMA     :		,
		enter tab index: 46, name: &14, kind: var, type: int, value: 0, adr:19
ZERO      :		0
		this is a num:0.
		this is a factor.
		this is a term.
		this is an expr.
COMMA     :		,
		enter tab index: 47, name: &15, kind: var, type: int, value: 0, adr:20
ZERO      :		0
		this is a num:0.
		this is a factor.
		this is a term.
		this is an expr.
		this is value para list.
RPARENT   :		)
		this is a call stat.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" some expr: "
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" exp1 --10: "
COMMA     :		,
MINUS     :		-
		enter tab index: 48, name: &16, kind: var, type: int, value: 0, adr:21
MINUS     :		-
UNSIGNUM  :		10
		this is a num:-10.
		this is a factor.
		this is a term.
		enter tab index: 49, name: &17, kind: var, type: int, value: 0, adr:22
		this is an expr.
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" exp2 -10*(-10--4)/4++1*-9--6/-3: "
COMMA     :		,
MINUS     :		-
		enter tab index: 50, name: &18, kind: var, type: int, value: 0, adr:23
UNSIGNUM  :		10
		this is a num:10.
		this is a factor.
MUL       :		*
LPARENT   :		(
MINUS     :		-
		enter tab index: 51, name: &19, kind: var, type: int, value: 0, adr:24
UNSIGNUM  :		10
		this is a num:10.
		this is a factor.
		this is a term.
		enter tab index: 52, name: &20, kind: var, type: int, value: 0, adr:25
MINUS     :		-
		enter tab index: 53, name: &21, kind: var, type: int, value: 0, adr:26
MINUS     :		-
UNSIGNUM  :		4
		this is a num:-4.
		this is a factor.
		this is a term.
		enter tab index: 54, name: &22, kind: var, type: int, value: 0, adr:27
		this is an expr.
RPARENT   :		)
		this is a factor.
		enter tab index: 55, name: &23, kind: var, type: int, value: 0, adr:28
DIVD      :		/
		enter tab index: 56, name: &24, kind: var, type: int, value: 0, adr:29
UNSIGNUM  :		4
		this is a num:4.
		this is a factor.
		enter tab index: 57, name: &25, kind: var, type: int, value: 0, adr:30
		this is a term.
		enter tab index: 58, name: &26, kind: var, type: int, value: 0, adr:31
PLUS      :		+
		enter tab index: 59, name: &27, kind: var, type: int, value: 0, adr:32
PLUS      :		+
UNSIGNUM  :		1
		this is a num:1.
		this is a factor.
MUL       :		*
		enter tab index: 60, name: &28, kind: var, type: int, value: 0, adr:33
MINUS     :		-
UNSIGNUM  :		9
		this is a num:-9.
		this is a factor.
		enter tab index: 61, name: &29, kind: var, type: int, value: 0, adr:34
		this is a term.
		enter tab index: 62, name: &30, kind: var, type: int, value: 0, adr:35
MINUS     :		-
		enter tab index: 63, name: &31, kind: var, type: int, value: 0, adr:36
MINUS     :		-
UNSIGNUM  :		6
		this is a num:-6.
		this is a factor.
DIVD      :		/
		enter tab index: 64, name: &32, kind: var, type: int, value: 0, adr:37
MINUS     :		-
UNSIGNUM  :		3
		this is a num:-3.
		this is a factor.
		enter tab index: 65, name: &33, kind: var, type: int, value: 0, adr:38
		this is a term.
		enter tab index: 66, name: &34, kind: var, type: int, value: 0, adr:39
		this is an expr.
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" exp3 -fib(fib(+4)+-1)-+1: "
COMMA     :		,
MINUS     :		-
IDENT     :		fib
		enter tab index: 67, name: &35, kind: var, type: int, value: 0, adr:40
LPARENT   :		(
IDENT     :		fib
		enter tab index: 68, name: &36, kind: var, type: int, value: 0, adr:41
LPARENT   :		(
PLUS      :		+
		enter tab index: 69, name: &37, kind: var, type: int, value: 0, adr:42
UNSIGNUM  :		4
		this is a num:4.
		this is a factor.
		this is a term.
		this is an expr.
		this is value para list.
RPARENT   :		)
		this is a call stat.
		this is a term.
PLUS      :		+
		enter tab index: 70, name: &38, kind: var, type: int, value: 0, adr:43
MINUS     :		-
UNSIGNUM  :		1
		this is a num:-1.
		this is a factor.
		this is a term.
		enter tab index: 71, name: &39, kind: var, type: int, value: 0, adr:44
		this is an expr.
		this is value para list.
RPARENT   :		)
		this is a call stat.
		this is a term.
		enter tab index: 72, name: &40, kind: var, type: int, value: 0, adr:45
MINUS     :		-
		enter tab index: 73, name: &41, kind: var, type: int, value: 0, adr:46
PLUS      :		+
UNSIGNUM  :		1
		this is a num:1.
		this is a factor.
		this is a term.
		enter tab index: 74, name: &42, kind: var, type: int, value: 0, adr:47
		this is an expr.
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" expr with arr "
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
IDENT     :		i
BECOME    :		=
		enter tab index: 75, name: &43, kind: var, type: int, value: 0, adr:48
ZERO      :		0
		this is a num:0.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" set arr "
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
WHILESY   :		while
LPARENT   :		(
IDENT     :		i
		this is a factor.
		this is a term.
		this is an expr.
LES       :		<
		enter tab index: 76, name: &44, kind: var, type: int, value: 0, adr:49
UNSIGNUM  :		5
		this is a num:5.
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 77, name: &45, kind: var, type: int, value: 0, adr:50
		this is a condition.
RPARENT   :		)
LBRACE    :		{
IDENT     :		intarr
LBRACK    :		[
IDENT     :		i
		this is a factor.
		this is a term.
		this is an expr.
RBRACK    :		]
BECOME    :		=
IDENT     :		fib
		enter tab index: 78, name: &46, kind: var, type: int, value: 0, adr:51
LPARENT   :		(
IDENT     :		fib
		enter tab index: 79, name: &47, kind: var, type: int, value: 0, adr:52
LPARENT   :		(
IDENT     :		i
		this is a factor.
		this is a term.
		this is an expr.
		this is value para list.
RPARENT   :		)
		this is a call stat.
		this is a term.
PLUS      :		+
		enter tab index: 80, name: &48, kind: var, type: int, value: 0, adr:53
UNSIGNUM  :		2
		this is a num:2.
		this is a factor.
		this is a term.
		enter tab index: 81, name: &49, kind: var, type: int, value: 0, adr:54
		this is an expr.
		this is value para list.
RPARENT   :		)
		this is a call stat.
MUL       :		*
LPARENT   :		(
IDENT     :		i
		this is a factor.
		this is a term.
PLUS      :		+
		enter tab index: 82, name: &50, kind: var, type: int, value: 0, adr:55
UNSIGNUM  :		1
		this is a num:1.
		this is a factor.
		this is a term.
		enter tab index: 83, name: &51, kind: var, type: int, value: 0, adr:56
		this is an expr.
RPARENT   :		)
		this is a factor.
		enter tab index: 84, name: &52, kind: var, type: int, value: 0, adr:57
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" "
COMMA     :		,
IDENT     :		intarr
LBRACK    :		[
IDENT     :		i
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 85, name: &53, kind: var, type: int, value: 0, adr:58
RBRACK    :		]
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
IDENT     :		i
BECOME    :		=
IDENT     :		i
		this is a factor.
		this is a term.
PLUS      :		+
		enter tab index: 86, name: &54, kind: var, type: int, value: 0, adr:59
UNSIGNUM  :		1
		this is a num:1.
		this is a factor.
		this is a term.
		enter tab index: 87, name: &55, kind: var, type: int, value: 0, adr:60
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a while stat.
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" fib(intarr[3]) "
COMMA     :		,
IDENT     :		fib
		enter tab index: 88, name: &56, kind: var, type: int, value: 0, adr:61
LPARENT   :		(
IDENT     :		intarr
LBRACK    :		[
		enter tab index: 89, name: &57, kind: var, type: int, value: 0, adr:62
UNSIGNUM  :		3
		this is a num:3.
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 90, name: &58, kind: var, type: int, value: 0, adr:63
RBRACK    :		]
		this is a factor.
		this is a term.
		this is an expr.
		this is value para list.
RPARENT   :		)
		this is a call stat.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" intarr[fib(2)] "
COMMA     :		,
IDENT     :		intarr
LBRACK    :		[
IDENT     :		fib
		enter tab index: 91, name: &59, kind: var, type: int, value: 0, adr:64
LPARENT   :		(
		enter tab index: 92, name: &60, kind: var, type: int, value: 0, adr:65
UNSIGNUM  :		2
		this is a num:2.
		this is a factor.
		this is a term.
		this is an expr.
		this is value para list.
RPARENT   :		)
		this is a call stat.
		this is a term.
		this is an expr.
		enter tab index: 93, name: &61, kind: var, type: int, value: 0, adr:66
RBRACK    :		]
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" intarr[intarr[2]-2] "
COMMA     :		,
IDENT     :		intarr
LBRACK    :		[
IDENT     :		intarr
LBRACK    :		[
		enter tab index: 94, name: &62, kind: var, type: int, value: 0, adr:67
UNSIGNUM  :		2
		this is a num:2.
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 95, name: &63, kind: var, type: int, value: 0, adr:68
RBRACK    :		]
		this is a factor.
		this is a term.
MINUS     :		-
		enter tab index: 96, name: &64, kind: var, type: int, value: 0, adr:69
UNSIGNUM  :		2
		this is a num:2.
		this is a factor.
		this is a term.
		enter tab index: 97, name: &65, kind: var, type: int, value: 0, adr:70
		this is an expr.
		enter tab index: 98, name: &66, kind: var, type: int, value: 0, adr:71
RBRACK    :		]
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		"input arg1: "
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
SCANFSY   :		scanf
LPARENT   :		(
IDENT     :		m
RPARENT   :		)
		this is a read stat.
SEMICOLON :		;
		this is a stat.
IDENT     :		op
BECOME    :		=
		enter tab index: 99, name: &67, kind: var, type: int, value: 0, adr:72
CHARCON   :		'+'
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
WHILESY   :		while
LPARENT   :		(
IDENT     :		op
		this is a factor.
		this is a term.
		this is an expr.
NEQ       :		!=
		enter tab index: 100, name: &68, kind: var, type: int, value: 0, adr:73
CHARCON   :		'q'
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 101, name: &69, kind: var, type: int, value: 0, adr:74
		this is a condition.
RPARENT   :		)
LBRACE    :		{
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" input op:(+-*/)(q:end) "
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
SCANFSY   :		scanf
LPARENT   :		(
IDENT     :		op
RPARENT   :		)
		this is a read stat.
SEMICOLON :		;
		this is a stat.
SWITCHSY  :		switch
LPARENT   :		(
IDENT     :		op
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
LBRACE    :		{
CASESY    :		case
CHARCON   :		'+'
COLON     :		:
LBRACE    :		{
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" input arg2"
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
SCANFSY   :		scanf
LPARENT   :		(
IDENT     :		n
RPARENT   :		)
		this is a read stat.
SEMICOLON :		;
		this is a stat.
IDENT     :		m
BECOME    :		=
IDENT     :		m
		this is a factor.
		this is a term.
PLUS      :		+
IDENT     :		n
		this is a factor.
		this is a term.
		enter tab index: 102, name: &70, kind: var, type: int, value: 0, adr:75
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a one case.
CASESY    :		case
CHARCON   :		'*'
COLON     :		:
LBRACE    :		{
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" input arg2"
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
SCANFSY   :		scanf
LPARENT   :		(
IDENT     :		n
RPARENT   :		)
		this is a read stat.
SEMICOLON :		;
		this is a stat.
IDENT     :		m
BECOME    :		=
IDENT     :		m
		this is a factor.
MUL       :		*
IDENT     :		n
		this is a factor.
		enter tab index: 103, name: &71, kind: var, type: int, value: 0, adr:76
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a one case.
CASESY    :		case
UNSIGNUM  :		45
		this is a num:45.
COLON     :		:
LBRACE    :		{
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" input arg2"
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
SCANFSY   :		scanf
LPARENT   :		(
IDENT     :		n
RPARENT   :		)
		this is a read stat.
SEMICOLON :		;
		this is a stat.
IDENT     :		m
BECOME    :		=
IDENT     :		m
		this is a factor.
		this is a term.
MINUS     :		-
IDENT     :		n
		this is a factor.
		this is a term.
		enter tab index: 104, name: &72, kind: var, type: int, value: 0, adr:77
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a one case.
CASESY    :		case
UNSIGNUM  :		47
		this is a num:47.
COLON     :		:
LBRACE    :		{
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" input arg2"
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
SCANFSY   :		scanf
LPARENT   :		(
IDENT     :		n
RPARENT   :		)
		this is a read stat.
SEMICOLON :		;
		this is a stat.
IDENT     :		m
BECOME    :		=
IDENT     :		m
		this is a factor.
DIVD      :		/
IDENT     :		n
		this is a factor.
		enter tab index: 105, name: &73, kind: var, type: int, value: 0, adr:78
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a one case.
CASESY    :		case
CHARCON   :		'q'
COLON     :		:
LBRACE    :		{
RETURNSY  :		return
		this is a return stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a one case.
		this is a case table.
		enter tab index: 106, name: &74, kind: var, type: int, value: 0, adr:79
		enter tab index: 107, name: &75, kind: var, type: int, value: 0, adr:80
		enter tab index: 108, name: &76, kind: var, type: int, value: 0, adr:81
		enter tab index: 109, name: &77, kind: var, type: int, value: 0, adr:82
		enter tab index: 110, name: &78, kind: var, type: int, value: 0, adr:83
RBRACE    :		}
		this is a switch stat.
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		"result: "
COMMA     :		,
IDENT     :		m
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a while stat.
		this is a stat.
		this is a stat list.
		this is complex stat.
RBRACE    :		}
		this is a void func dec.
INTSY     :		int
		enter tab index: 111, name: partition, kind: func, type: int, value: 0, adr:84
		enter btab index: 6, name: partition, tidx: 111, spacesz:0, paraN:0
IDENT     :		partition
LPARENT   :		(
CHARSY    :		char
		enter tab index: 112, name: type, kind: para, type: char, value: 0, adr:0
IDENT     :		type
COMMA     :		,
INTSY     :		int
		enter tab index: 113, name: low, kind: para, type: int, value: 0, adr:1
IDENT     :		low
COMMA     :		,
INTSY     :		int
		enter tab index: 114, name: high, kind: para, type: int, value: 0, adr:2
IDENT     :		high
		this is para list.
		enter para num for func partition, para num: 3
RPARENT   :		)
LBRACE    :		{
INTSY     :		int
IDENT     :		pivot
		enter tab index: 115, name: pivot, kind: var, type: int, value: 1, adr:14
COMMA     :		,
IDENT     :		cond1
		enter tab index: 116, name: cond1, kind: var, type: int, value: 1, adr:15
COMMA     :		,
IDENT     :		cond2
		enter tab index: 117, name: cond2, kind: var, type: int, value: 1, adr:16
COMMA     :		,
IDENT     :		i
		enter tab index: 118, name: i, kind: var, type: int, value: 1, adr:17
		this is var def.
SEMICOLON :		;
CHARSY    :		char
IDENT     :		chpivot
		enter tab index: 119, name: chpivot, kind: var, type: char, value: 1, adr:18
		this is var def.
SEMICOLON :		;
		this is dec of var.
IDENT     :		cond1
BECOME    :		=
		enter tab index: 120, name: &79, kind: var, type: int, value: 0, adr:19
ZERO      :		0
		this is a num:0.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
IDENT     :		cond2
BECOME    :		=
		enter tab index: 121, name: &80, kind: var, type: int, value: 0, adr:20
ZERO      :		0
		this is a num:0.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
IFSY      :		if
LPARENT   :		(
IDENT     :		type
		this is a factor.
		this is a term.
		this is an expr.
EQL       :		==
		enter tab index: 122, name: &81, kind: var, type: int, value: 0, adr:21
CHARCON   :		'i'
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 123, name: &82, kind: var, type: int, value: 0, adr:22
		this is a condition.
RPARENT   :		)
IDENT     :		pivot
BECOME    :		=
IDENT     :		intarr
LBRACK    :		[
IDENT     :		low
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 124, name: &83, kind: var, type: int, value: 0, adr:23
RBRACK    :		]
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
ELSESY    :		else
IDENT     :		chpivot
BECOME    :		=
IDENT     :		chararr
LBRACK    :		[
IDENT     :		low
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 125, name: &84, kind: var, type: int, value: 0, adr:24
RBRACK    :		]
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is an if stat.
		this is a stat.
WHILESY   :		while
LPARENT   :		(
IDENT     :		low
		this is a factor.
		this is a term.
		this is an expr.
LES       :		<
IDENT     :		high
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 126, name: &85, kind: var, type: int, value: 0, adr:25
		this is a condition.
RPARENT   :		)
LBRACE    :		{
IDENT     :		i
BECOME    :		=
		enter tab index: 127, name: &86, kind: var, type: int, value: 0, adr:26
ZERO      :		0
		this is a num:0.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
IFSY      :		if
LPARENT   :		(
IDENT     :		low
		this is a factor.
		this is a term.
		this is an expr.
LES       :		<
IDENT     :		high
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 128, name: &87, kind: var, type: int, value: 0, adr:27
		this is a condition.
RPARENT   :		)
IDENT     :		cond1
BECOME    :		=
		enter tab index: 129, name: &88, kind: var, type: int, value: 0, adr:28
UNSIGNUM  :		1
		this is a num:1.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
ELSESY    :		else
IDENT     :		cond1
BECOME    :		=
		enter tab index: 130, name: &89, kind: var, type: int, value: 0, adr:29
ZERO      :		0
		this is a num:0.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is an if stat.
		this is a stat.
IFSY      :		if
LPARENT   :		(
IDENT     :		type
		this is a factor.
		this is a term.
		this is an expr.
EQL       :		==
		enter tab index: 131, name: &90, kind: var, type: int, value: 0, adr:30
CHARCON   :		'i'
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 132, name: &91, kind: var, type: int, value: 0, adr:31
		this is a condition.
RPARENT   :		)
LBRACE    :		{
IFSY      :		if
LPARENT   :		(
IDENT     :		intarr
LBRACK    :		[
IDENT     :		high
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 133, name: &92, kind: var, type: int, value: 0, adr:32
RBRACK    :		]
		this is a factor.
		this is a term.
		this is an expr.
GEQ       :		>=
IDENT     :		pivot
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 134, name: &93, kind: var, type: int, value: 0, adr:33
		this is a condition.
RPARENT   :		)
IDENT     :		cond2
BECOME    :		=
		enter tab index: 135, name: &94, kind: var, type: int, value: 0, adr:34
UNSIGNUM  :		1
		this is a num:1.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
ELSESY    :		else
IDENT     :		cond2
BECOME    :		=
		enter tab index: 136, name: &95, kind: var, type: int, value: 0, adr:35
ZERO      :		0
		this is a num:0.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is an if stat.
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
ELSESY    :		else
LBRACE    :		{
IFSY      :		if
LPARENT   :		(
IDENT     :		chararr
LBRACK    :		[
IDENT     :		high
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 137, name: &96, kind: var, type: int, value: 0, adr:36
RBRACK    :		]
		this is a factor.
		this is a term.
		this is an expr.
GEQ       :		>=
IDENT     :		chpivot
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 138, name: &97, kind: var, type: int, value: 0, adr:37
		this is a condition.
RPARENT   :		)
IDENT     :		cond2
BECOME    :		=
		enter tab index: 139, name: &98, kind: var, type: int, value: 0, adr:38
UNSIGNUM  :		1
		this is a num:1.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
ELSESY    :		else
IDENT     :		cond2
BECOME    :		=
		enter tab index: 140, name: &99, kind: var, type: int, value: 0, adr:39
ZERO      :		0
		this is a num:0.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is an if stat.
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is an if stat.
		this is a stat.
WHILESY   :		while
LPARENT   :		(
IDENT     :		cond1
		this is a factor.
		this is a term.
PLUS      :		+
IDENT     :		cond2
		this is a factor.
		this is a term.
		enter tab index: 141, name: &100, kind: var, type: int, value: 0, adr:40
		this is an expr.
EQL       :		==
		enter tab index: 142, name: &101, kind: var, type: int, value: 0, adr:41
UNSIGNUM  :		2
		this is a num:2.
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 143, name: &102, kind: var, type: int, value: 0, adr:42
		this is a condition.
RPARENT   :		)
LBRACE    :		{
IDENT     :		high
BECOME    :		=
IDENT     :		high
		this is a factor.
		this is a term.
MINUS     :		-
		enter tab index: 144, name: &103, kind: var, type: int, value: 0, adr:43
UNSIGNUM  :		1
		this is a num:1.
		this is a factor.
		this is a term.
		enter tab index: 145, name: &104, kind: var, type: int, value: 0, adr:44
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
IFSY      :		if
LPARENT   :		(
IDENT     :		low
		this is a factor.
		this is a term.
		this is an expr.
LES       :		<
IDENT     :		high
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 146, name: &105, kind: var, type: int, value: 0, adr:45
		this is a condition.
RPARENT   :		)
IDENT     :		cond1
BECOME    :		=
		enter tab index: 147, name: &106, kind: var, type: int, value: 0, adr:46
UNSIGNUM  :		1
		this is a num:1.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
ELSESY    :		else
IDENT     :		cond1
BECOME    :		=
		enter tab index: 148, name: &107, kind: var, type: int, value: 0, adr:47
ZERO      :		0
		this is a num:0.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is an if stat.
		this is a stat.
IFSY      :		if
LPARENT   :		(
IDENT     :		type
		this is a factor.
		this is a term.
		this is an expr.
EQL       :		==
		enter tab index: 149, name: &108, kind: var, type: int, value: 0, adr:48
CHARCON   :		'i'
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 150, name: &109, kind: var, type: int, value: 0, adr:49
		this is a condition.
RPARENT   :		)
LBRACE    :		{
IFSY      :		if
LPARENT   :		(
IDENT     :		intarr
LBRACK    :		[
IDENT     :		high
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 151, name: &110, kind: var, type: int, value: 0, adr:50
RBRACK    :		]
		this is a factor.
		this is a term.
		this is an expr.
GEQ       :		>=
IDENT     :		pivot
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 152, name: &111, kind: var, type: int, value: 0, adr:51
		this is a condition.
RPARENT   :		)
IDENT     :		cond2
BECOME    :		=
		enter tab index: 153, name: &112, kind: var, type: int, value: 0, adr:52
UNSIGNUM  :		1
		this is a num:1.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
ELSESY    :		else
IDENT     :		cond2
BECOME    :		=
		enter tab index: 154, name: &113, kind: var, type: int, value: 0, adr:53
ZERO      :		0
		this is a num:0.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is an if stat.
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
ELSESY    :		else
LBRACE    :		{
IFSY      :		if
LPARENT   :		(
IDENT     :		chararr
LBRACK    :		[
IDENT     :		high
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 155, name: &114, kind: var, type: int, value: 0, adr:54
RBRACK    :		]
		this is a factor.
		this is a term.
		this is an expr.
GEQ       :		>=
IDENT     :		chpivot
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 156, name: &115, kind: var, type: int, value: 0, adr:55
		this is a condition.
RPARENT   :		)
IDENT     :		cond2
BECOME    :		=
		enter tab index: 157, name: &116, kind: var, type: int, value: 0, adr:56
UNSIGNUM  :		1
		this is a num:1.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
ELSESY    :		else
IDENT     :		cond2
BECOME    :		=
		enter tab index: 158, name: &117, kind: var, type: int, value: 0, adr:57
ZERO      :		0
		this is a num:0.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is an if stat.
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is an if stat.
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a while stat.
		this is a stat.
IFSY      :		if
LPARENT   :		(
IDENT     :		type
		this is a factor.
		this is a term.
		this is an expr.
EQL       :		==
		enter tab index: 159, name: &118, kind: var, type: int, value: 0, adr:58
CHARCON   :		'i'
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 160, name: &119, kind: var, type: int, value: 0, adr:59
		this is a condition.
RPARENT   :		)
IDENT     :		intarr
LBRACK    :		[
IDENT     :		low
		this is a factor.
		this is a term.
		this is an expr.
RBRACK    :		]
BECOME    :		=
IDENT     :		intarr
LBRACK    :		[
IDENT     :		high
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 161, name: &120, kind: var, type: int, value: 0, adr:60
RBRACK    :		]
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
ELSESY    :		else
IDENT     :		chararr
LBRACK    :		[
IDENT     :		low
		this is a factor.
		this is a term.
		this is an expr.
RBRACK    :		]
BECOME    :		=
IDENT     :		chararr
LBRACK    :		[
IDENT     :		high
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 162, name: &121, kind: var, type: int, value: 0, adr:61
RBRACK    :		]
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is an if stat.
		this is a stat.
IDENT     :		cond1
BECOME    :		=
		enter tab index: 163, name: &122, kind: var, type: int, value: 0, adr:62
ZERO      :		0
		this is a num:0.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
IDENT     :		cond2
BECOME    :		=
		enter tab index: 164, name: &123, kind: var, type: int, value: 0, adr:63
ZERO      :		0
		this is a num:0.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
IFSY      :		if
LPARENT   :		(
IDENT     :		low
		this is a factor.
		this is a term.
		this is an expr.
LES       :		<
IDENT     :		high
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 165, name: &124, kind: var, type: int, value: 0, adr:64
		this is a condition.
RPARENT   :		)
IDENT     :		cond1
BECOME    :		=
		enter tab index: 166, name: &125, kind: var, type: int, value: 0, adr:65
UNSIGNUM  :		1
		this is a num:1.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
ELSESY    :		else
IDENT     :		cond1
BECOME    :		=
		enter tab index: 167, name: &126, kind: var, type: int, value: 0, adr:66
ZERO      :		0
		this is a num:0.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is an if stat.
		this is a stat.
IFSY      :		if
LPARENT   :		(
IDENT     :		type
		this is a factor.
		this is a term.
		this is an expr.
EQL       :		==
		enter tab index: 168, name: &127, kind: var, type: int, value: 0, adr:67
CHARCON   :		'i'
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 169, name: &128, kind: var, type: int, value: 0, adr:68
		this is a condition.
RPARENT   :		)
LBRACE    :		{
IFSY      :		if
LPARENT   :		(
IDENT     :		intarr
LBRACK    :		[
IDENT     :		low
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 170, name: &129, kind: var, type: int, value: 0, adr:69
RBRACK    :		]
		this is a factor.
		this is a term.
		this is an expr.
LEQ       :		<=
IDENT     :		pivot
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 171, name: &130, kind: var, type: int, value: 0, adr:70
		this is a condition.
RPARENT   :		)
IDENT     :		cond2
BECOME    :		=
		enter tab index: 172, name: &131, kind: var, type: int, value: 0, adr:71
UNSIGNUM  :		1
		this is a num:1.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
ELSESY    :		else
IDENT     :		cond2
BECOME    :		=
		enter tab index: 173, name: &132, kind: var, type: int, value: 0, adr:72
ZERO      :		0
		this is a num:0.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is an if stat.
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
ELSESY    :		else
LBRACE    :		{
IFSY      :		if
LPARENT   :		(
IDENT     :		chararr
LBRACK    :		[
IDENT     :		low
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 174, name: &133, kind: var, type: int, value: 0, adr:73
RBRACK    :		]
		this is a factor.
		this is a term.
		this is an expr.
LEQ       :		<=
IDENT     :		chpivot
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 175, name: &134, kind: var, type: int, value: 0, adr:74
		this is a condition.
RPARENT   :		)
IDENT     :		cond2
BECOME    :		=
		enter tab index: 176, name: &135, kind: var, type: int, value: 0, adr:75
UNSIGNUM  :		1
		this is a num:1.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
ELSESY    :		else
IDENT     :		cond2
BECOME    :		=
		enter tab index: 177, name: &136, kind: var, type: int, value: 0, adr:76
ZERO      :		0
		this is a num:0.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is an if stat.
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is an if stat.
		this is a stat.
WHILESY   :		while
LPARENT   :		(
IDENT     :		cond1
		this is a factor.
		this is a term.
PLUS      :		+
IDENT     :		cond2
		this is a factor.
		this is a term.
		enter tab index: 178, name: &137, kind: var, type: int, value: 0, adr:77
		this is an expr.
EQL       :		==
		enter tab index: 179, name: &138, kind: var, type: int, value: 0, adr:78
UNSIGNUM  :		2
		this is a num:2.
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 180, name: &139, kind: var, type: int, value: 0, adr:79
		this is a condition.
RPARENT   :		)
LBRACE    :		{
IDENT     :		low
BECOME    :		=
IDENT     :		low
		this is a factor.
		this is a term.
PLUS      :		+
		enter tab index: 181, name: &140, kind: var, type: int, value: 0, adr:80
UNSIGNUM  :		1
		this is a num:1.
		this is a factor.
		this is a term.
		enter tab index: 182, name: &141, kind: var, type: int, value: 0, adr:81
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
IFSY      :		if
LPARENT   :		(
IDENT     :		low
		this is a factor.
		this is a term.
		this is an expr.
LES       :		<
IDENT     :		high
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 183, name: &142, kind: var, type: int, value: 0, adr:82
		this is a condition.
RPARENT   :		)
IDENT     :		cond1
BECOME    :		=
		enter tab index: 184, name: &143, kind: var, type: int, value: 0, adr:83
UNSIGNUM  :		1
		this is a num:1.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
ELSESY    :		else
IDENT     :		cond1
BECOME    :		=
		enter tab index: 185, name: &144, kind: var, type: int, value: 0, adr:84
ZERO      :		0
		this is a num:0.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is an if stat.
		this is a stat.
IFSY      :		if
LPARENT   :		(
IDENT     :		type
		this is a factor.
		this is a term.
		this is an expr.
EQL       :		==
		enter tab index: 186, name: &145, kind: var, type: int, value: 0, adr:85
CHARCON   :		'i'
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 187, name: &146, kind: var, type: int, value: 0, adr:86
		this is a condition.
RPARENT   :		)
LBRACE    :		{
IFSY      :		if
LPARENT   :		(
IDENT     :		intarr
LBRACK    :		[
IDENT     :		low
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 188, name: &147, kind: var, type: int, value: 0, adr:87
RBRACK    :		]
		this is a factor.
		this is a term.
		this is an expr.
LEQ       :		<=
IDENT     :		pivot
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 189, name: &148, kind: var, type: int, value: 0, adr:88
		this is a condition.
RPARENT   :		)
IDENT     :		cond2
BECOME    :		=
		enter tab index: 190, name: &149, kind: var, type: int, value: 0, adr:89
UNSIGNUM  :		1
		this is a num:1.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
ELSESY    :		else
IDENT     :		cond2
BECOME    :		=
		enter tab index: 191, name: &150, kind: var, type: int, value: 0, adr:90
ZERO      :		0
		this is a num:0.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is an if stat.
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
ELSESY    :		else
LBRACE    :		{
IFSY      :		if
LPARENT   :		(
IDENT     :		chararr
LBRACK    :		[
IDENT     :		low
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 192, name: &151, kind: var, type: int, value: 0, adr:91
RBRACK    :		]
		this is a factor.
		this is a term.
		this is an expr.
LEQ       :		<=
IDENT     :		chpivot
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 193, name: &152, kind: var, type: int, value: 0, adr:92
		this is a condition.
RPARENT   :		)
IDENT     :		cond2
BECOME    :		=
		enter tab index: 194, name: &153, kind: var, type: int, value: 0, adr:93
UNSIGNUM  :		1
		this is a num:1.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
ELSESY    :		else
IDENT     :		cond2
BECOME    :		=
		enter tab index: 195, name: &154, kind: var, type: int, value: 0, adr:94
ZERO      :		0
		this is a num:0.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is an if stat.
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is an if stat.
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a while stat.
		this is a stat.
IFSY      :		if
LPARENT   :		(
IDENT     :		type
		this is a factor.
		this is a term.
		this is an expr.
EQL       :		==
		enter tab index: 196, name: &155, kind: var, type: int, value: 0, adr:95
CHARCON   :		'i'
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 197, name: &156, kind: var, type: int, value: 0, adr:96
		this is a condition.
RPARENT   :		)
LBRACE    :		{
IDENT     :		intarr
LBRACK    :		[
IDENT     :		high
		this is a factor.
		this is a term.
		this is an expr.
RBRACK    :		]
BECOME    :		=
IDENT     :		intarr
LBRACK    :		[
IDENT     :		low
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 198, name: &157, kind: var, type: int, value: 0, adr:97
RBRACK    :		]
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
ELSESY    :		else
LBRACE    :		{
IDENT     :		chararr
LBRACK    :		[
IDENT     :		high
		this is a factor.
		this is a term.
		this is an expr.
RBRACK    :		]
BECOME    :		=
IDENT     :		chararr
LBRACK    :		[
IDENT     :		low
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 199, name: &158, kind: var, type: int, value: 0, adr:98
RBRACK    :		]
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is an if stat.
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a while stat.
		this is a stat.
IFSY      :		if
LPARENT   :		(
IDENT     :		type
		this is a factor.
		this is a term.
		this is an expr.
EQL       :		==
		enter tab index: 200, name: &159, kind: var, type: int, value: 0, adr:99
CHARCON   :		'i'
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 201, name: &160, kind: var, type: int, value: 0, adr:100
		this is a condition.
RPARENT   :		)
LBRACE    :		{
IDENT     :		intarr
LBRACK    :		[
IDENT     :		low
		this is a factor.
		this is a term.
		this is an expr.
RBRACK    :		]
BECOME    :		=
IDENT     :		pivot
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
ELSESY    :		else
LBRACE    :		{
IDENT     :		chararr
LBRACK    :		[
IDENT     :		low
		this is a factor.
		this is a term.
		this is an expr.
RBRACK    :		]
BECOME    :		=
IDENT     :		chpivot
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is an if stat.
		this is a stat.
RETURNSY  :		return
LPARENT   :		(
IDENT     :		low
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a return stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
		this is complex stat.
RBRACE    :		}
		this is a ret func dec.
VOIDSY    :		void
		enter tab index: 202, name: qsort, kind: func, type: void, value: 0, adr:101
		enter btab index: 7, name: qsort, tidx: 202, spacesz:0, paraN:0
IDENT     :		qsort
LPARENT   :		(
CHARSY    :		char
		enter tab index: 203, name: type, kind: para, type: char, value: 0, adr:0
IDENT     :		type
COMMA     :		,
INTSY     :		int
		enter tab index: 204, name: low, kind: para, type: int, value: 0, adr:1
IDENT     :		low
COMMA     :		,
INTSY     :		int
		enter tab index: 205, name: high, kind: para, type: int, value: 0, adr:2
IDENT     :		high
		this is para list.
		enter para num for func qsort, para num: 3
RPARENT   :		)
LBRACE    :		{
INTSY     :		int
IDENT     :		loc
		enter tab index: 206, name: loc, kind: var, type: int, value: 1, adr:14
		this is var def.
SEMICOLON :		;
		this is dec of var.
IDENT     :		loc
BECOME    :		=
		enter tab index: 207, name: &161, kind: var, type: int, value: 0, adr:15
ZERO      :		0
		this is a num:0.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
IFSY      :		if
LPARENT   :		(
IDENT     :		low
		this is a factor.
		this is a term.
		this is an expr.
LES       :		<
IDENT     :		high
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 208, name: &162, kind: var, type: int, value: 0, adr:16
		this is a condition.
RPARENT   :		)
LBRACE    :		{
IDENT     :		loc
BECOME    :		=
IDENT     :		partition
		enter tab index: 209, name: &163, kind: var, type: int, value: 0, adr:17
LPARENT   :		(
IDENT     :		type
		this is a factor.
		this is a term.
		this is an expr.
COMMA     :		,
IDENT     :		low
		this is a factor.
		this is a term.
		this is an expr.
COMMA     :		,
IDENT     :		high
		this is a factor.
		this is a term.
		this is an expr.
		this is value para list.
RPARENT   :		)
		this is a call stat.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
IDENT     :		qsort
LPARENT   :		(
IDENT     :		type
		this is a factor.
		this is a term.
		this is an expr.
COMMA     :		,
IDENT     :		low
		this is a factor.
		this is a term.
		this is an expr.
COMMA     :		,
IDENT     :		loc
		this is a factor.
		this is a term.
MINUS     :		-
		enter tab index: 210, name: &164, kind: var, type: int, value: 0, adr:18
UNSIGNUM  :		1
		this is a num:1.
		this is a factor.
		this is a term.
		enter tab index: 211, name: &165, kind: var, type: int, value: 0, adr:19
		this is an expr.
		this is value para list.
RPARENT   :		)
		this is a call stat.
SEMICOLON :		;
		this is a stat.
IDENT     :		qsort
LPARENT   :		(
IDENT     :		type
		this is a factor.
		this is a term.
		this is an expr.
COMMA     :		,
IDENT     :		loc
		this is a factor.
		this is a term.
PLUS      :		+
		enter tab index: 212, name: &166, kind: var, type: int, value: 0, adr:20
UNSIGNUM  :		1
		this is a num:1.
		this is a factor.
		this is a term.
		enter tab index: 213, name: &167, kind: var, type: int, value: 0, adr:21
		this is an expr.
COMMA     :		,
IDENT     :		high
		this is a factor.
		this is a term.
		this is an expr.
		this is value para list.
RPARENT   :		)
		this is a call stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is an if stat.
		this is a stat.
RETURNSY  :		return
		this is a return stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
		this is complex stat.
RBRACE    :		}
		this is a void func dec.
VOIDSY    :		void
		enter tab index: 214, name: arr, kind: func, type: void, value: 0, adr:22
		enter btab index: 8, name: arr, tidx: 214, spacesz:0, paraN:0
IDENT     :		arr
LPARENT   :		(
		this is para list.
		enter para num for func arr, para num: 0
RPARENT   :		)
LBRACE    :		{
INTSY     :		int
IDENT     :		i
		enter tab index: 215, name: i, kind: var, type: int, value: 1, adr:14
		this is var def.
SEMICOLON :		;
CHARSY    :		char
IDENT     :		type
		enter tab index: 216, name: type, kind: var, type: char, value: 1, adr:15
		this is var def.
SEMICOLON :		;
		this is dec of var.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" int arr(i) or char arr(c)? input i or c "
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
SCANFSY   :		scanf
LPARENT   :		(
IDENT     :		type
RPARENT   :		)
		this is a read stat.
SEMICOLON :		;
		this is a stat.
IFSY      :		if
LPARENT   :		(
IDENT     :		type
		this is a factor.
		this is a term.
		this is an expr.
EQL       :		==
		enter tab index: 217, name: &168, kind: var, type: int, value: 0, adr:16
CHARCON   :		'i'
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 218, name: &169, kind: var, type: int, value: 0, adr:17
		this is a condition.
RPARENT   :		)
LBRACE    :		{
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" input int arr content to sort. "
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
IDENT     :		i
BECOME    :		=
		enter tab index: 219, name: &170, kind: var, type: int, value: 0, adr:18
ZERO      :		0
		this is a num:0.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
WHILESY   :		while
LPARENT   :		(
IDENT     :		i
		this is a factor.
		this is a term.
		this is an expr.
LES       :		<
		enter tab index: 220, name: &171, kind: var, type: int, value: 0, adr:19
UNSIGNUM  :		10
		this is a num:10.
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 221, name: &172, kind: var, type: int, value: 0, adr:20
		this is a condition.
RPARENT   :		)
LBRACE    :		{
IDENT     :		intarr
LBRACK    :		[
IDENT     :		i
		this is a factor.
		this is a term.
		this is an expr.
RBRACK    :		]
BECOME    :		=
IDENT     :		getint
		enter tab index: 222, name: &173, kind: var, type: int, value: 0, adr:21
LPARENT   :		(
		this is value para list.
RPARENT   :		)
		this is a call stat.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
IDENT     :		i
BECOME    :		=
IDENT     :		i
		this is a factor.
		this is a term.
PLUS      :		+
		enter tab index: 223, name: &174, kind: var, type: int, value: 0, adr:22
UNSIGNUM  :		1
		this is a num:1.
		this is a factor.
		this is a term.
		enter tab index: 224, name: &175, kind: var, type: int, value: 0, adr:23
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a while stat.
		this is a stat.
IDENT     :		qsort
LPARENT   :		(
		enter tab index: 225, name: &176, kind: var, type: int, value: 0, adr:24
CHARCON   :		'i'
		this is a factor.
		this is a term.
		this is an expr.
COMMA     :		,
		enter tab index: 226, name: &177, kind: var, type: int, value: 0, adr:25
ZERO      :		0
		this is a num:0.
		this is a factor.
		this is a term.
		this is an expr.
COMMA     :		,
		enter tab index: 227, name: &178, kind: var, type: int, value: 0, adr:26
UNSIGNUM  :		9
		this is a num:9.
		this is a factor.
		this is a term.
		this is an expr.
		this is value para list.
RPARENT   :		)
		this is a call stat.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" int after sort: "
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
IDENT     :		i
BECOME    :		=
		enter tab index: 228, name: &179, kind: var, type: int, value: 0, adr:27
ZERO      :		0
		this is a num:0.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
WHILESY   :		while
LPARENT   :		(
IDENT     :		i
		this is a factor.
		this is a term.
		this is an expr.
LES       :		<
		enter tab index: 229, name: &180, kind: var, type: int, value: 0, adr:28
UNSIGNUM  :		10
		this is a num:10.
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 230, name: &181, kind: var, type: int, value: 0, adr:29
		this is a condition.
RPARENT   :		)
LBRACE    :		{
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" "
COMMA     :		,
IDENT     :		intarr
LBRACK    :		[
IDENT     :		i
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 231, name: &182, kind: var, type: int, value: 0, adr:30
RBRACK    :		]
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
IDENT     :		i
BECOME    :		=
IDENT     :		i
		this is a factor.
		this is a term.
PLUS      :		+
		enter tab index: 232, name: &183, kind: var, type: int, value: 0, adr:31
UNSIGNUM  :		1
		this is a num:1.
		this is a factor.
		this is a term.
		enter tab index: 233, name: &184, kind: var, type: int, value: 0, adr:32
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a while stat.
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
ELSESY    :		else
IFSY      :		if
LPARENT   :		(
IDENT     :		type
		this is a factor.
		this is a term.
		this is an expr.
EQL       :		==
		enter tab index: 234, name: &185, kind: var, type: int, value: 0, adr:33
CHARCON   :		'c'
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 235, name: &186, kind: var, type: int, value: 0, adr:34
		this is a condition.
RPARENT   :		)
LBRACE    :		{
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" input char arr content to sort. "
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
IDENT     :		i
BECOME    :		=
		enter tab index: 236, name: &187, kind: var, type: int, value: 0, adr:35
ZERO      :		0
		this is a num:0.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
WHILESY   :		while
LPARENT   :		(
IDENT     :		i
		this is a factor.
		this is a term.
		this is an expr.
LES       :		<
		enter tab index: 237, name: &188, kind: var, type: int, value: 0, adr:36
UNSIGNUM  :		10
		this is a num:10.
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 238, name: &189, kind: var, type: int, value: 0, adr:37
		this is a condition.
RPARENT   :		)
LBRACE    :		{
IDENT     :		chararr
LBRACK    :		[
IDENT     :		i
		this is a factor.
		this is a term.
		this is an expr.
RBRACK    :		]
BECOME    :		=
IDENT     :		getch
		enter tab index: 239, name: &190, kind: var, type: int, value: 0, adr:38
LPARENT   :		(
		this is value para list.
RPARENT   :		)
		this is a call stat.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
IDENT     :		i
BECOME    :		=
IDENT     :		i
		this is a factor.
		this is a term.
PLUS      :		+
		enter tab index: 240, name: &191, kind: var, type: int, value: 0, adr:39
UNSIGNUM  :		1
		this is a num:1.
		this is a factor.
		this is a term.
		enter tab index: 241, name: &192, kind: var, type: int, value: 0, adr:40
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a while stat.
		this is a stat.
IDENT     :		qsort
LPARENT   :		(
		enter tab index: 242, name: &193, kind: var, type: int, value: 0, adr:41
CHARCON   :		'c'
		this is a factor.
		this is a term.
		this is an expr.
COMMA     :		,
		enter tab index: 243, name: &194, kind: var, type: int, value: 0, adr:42
ZERO      :		0
		this is a num:0.
		this is a factor.
		this is a term.
		this is an expr.
COMMA     :		,
		enter tab index: 244, name: &195, kind: var, type: int, value: 0, adr:43
UNSIGNUM  :		9
		this is a num:9.
		this is a factor.
		this is a term.
		this is an expr.
		this is value para list.
RPARENT   :		)
		this is a call stat.
SEMICOLON :		;
		this is a stat.
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" char after sort: "
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
IDENT     :		i
BECOME    :		=
		enter tab index: 245, name: &196, kind: var, type: int, value: 0, adr:44
ZERO      :		0
		this is a num:0.
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
WHILESY   :		while
LPARENT   :		(
IDENT     :		i
		this is a factor.
		this is a term.
		this is an expr.
LES       :		<
		enter tab index: 246, name: &197, kind: var, type: int, value: 0, adr:45
UNSIGNUM  :		10
		this is a num:10.
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 247, name: &198, kind: var, type: int, value: 0, adr:46
		this is a condition.
RPARENT   :		)
LBRACE    :		{
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" "
COMMA     :		,
IDENT     :		chararr
LBRACK    :		[
IDENT     :		i
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 248, name: &199, kind: var, type: int, value: 0, adr:47
RBRACK    :		]
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
IDENT     :		i
BECOME    :		=
IDENT     :		i
		this is a factor.
		this is a term.
PLUS      :		+
		enter tab index: 249, name: &200, kind: var, type: int, value: 0, adr:48
UNSIGNUM  :		1
		this is a num:1.
		this is a factor.
		this is a term.
		enter tab index: 250, name: &201, kind: var, type: int, value: 0, adr:49
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a while stat.
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
ELSESY    :		else
LBRACE    :		{
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" invalid input. "
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is an if stat.
		this is a stat.
		this is an if stat.
		this is a stat.
RETURNSY  :		return
		this is a return stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
		this is complex stat.
RBRACE    :		}
		this is a void func dec.
VOIDSY    :		void
		enter tab index: 251, name: main, kind: func, type: void, value: 0, adr:50
		enter btab index: 9, name: main, tidx: 251, spacesz:0, paraN:0
MAINSY    :		main
LPARENT   :		(
RPARENT   :		)
LBRACE    :		{
CHARSY    :		char
IDENT     :		cmd
		enter tab index: 252, name: cmd, kind: var, type: char, value: 1, adr:1
		this is var def.
SEMICOLON :		;
INTSY     :		int
IDENT     :		n
		enter tab index: 253, name: n, kind: var, type: int, value: 1, adr:2
		this is var def.
SEMICOLON :		;
		this is dec of var.
IDENT     :		cmd
BECOME    :		=
		enter tab index: 254, name: &202, kind: var, type: int, value: 0, adr:3
CHARCON   :		'+'
		this is a factor.
		this is a term.
		this is an expr.
		this is a assignment.
SEMICOLON :		;
		this is a stat.
WHILESY   :		while
LPARENT   :		(
IDENT     :		cmd
		this is a factor.
		this is a term.
		this is an expr.
NEQ       :		!=
		enter tab index: 255, name: &203, kind: var, type: int, value: 0, adr:4
CHARCON   :		'q'
		this is a factor.
		this is a term.
		this is an expr.
		enter tab index: 256, name: &204, kind: var, type: int, value: 0, adr:5
		this is a condition.
RPARENT   :		)
LBRACE    :		{
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" input cmd: a:arr,c:cal,e:empty,f:fib,s:sum,q:quit "
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
SCANFSY   :		scanf
LPARENT   :		(
IDENT     :		cmd
RPARENT   :		)
		this is a read stat.
SEMICOLON :		;
		this is a stat.
SWITCHSY  :		switch
LPARENT   :		(
IDENT     :		cmd
		this is a factor.
		this is a term.
		this is an expr.
RPARENT   :		)
LBRACE    :		{
CASESY    :		case
CHARCON   :		'a'
COLON     :		:
LBRACE    :		{
IDENT     :		arr
LPARENT   :		(
		this is value para list.
RPARENT   :		)
		this is a call stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a one case.
CASESY    :		case
CHARCON   :		'c'
COLON     :		:
LBRACE    :		{
IDENT     :		cal
LPARENT   :		(
		this is value para list.
RPARENT   :		)
		this is a call stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a one case.
CASESY    :		case
CHARCON   :		'e'
COLON     :		:
LBRACE    :		{
IDENT     :		empty
LPARENT   :		(
		this is value para list.
RPARENT   :		)
		this is a call stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a one case.
CASESY    :		case
CHARCON   :		'f'
COLON     :		:
LBRACE    :		{
PRINTFSY  :		printf
LPARENT   :		(
IDENT     :		fib
		enter tab index: 257, name: &205, kind: var, type: int, value: 0, adr:6
LPARENT   :		(
IDENT     :		getint
		enter tab index: 258, name: &206, kind: var, type: int, value: 0, adr:7
LPARENT   :		(
		this is value para list.
RPARENT   :		)
		this is a call stat.
		this is a term.
		this is an expr.
		this is value para list.
RPARENT   :		)
		this is a call stat.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a one case.
CASESY    :		case
CHARCON   :		's'
COLON     :		:
LBRACE    :		{
PRINTFSY  :		printf
LPARENT   :		(
IDENT     :		sum
		enter tab index: 259, name: &207, kind: var, type: int, value: 0, adr:8
LPARENT   :		(
IDENT     :		getint
		enter tab index: 260, name: &208, kind: var, type: int, value: 0, adr:9
LPARENT   :		(
		this is value para list.
RPARENT   :		)
		this is a call stat.
		this is a term.
		this is an expr.
COMMA     :		,
IDENT     :		getint
		enter tab index: 261, name: &209, kind: var, type: int, value: 0, adr:10
LPARENT   :		(
		this is value para list.
RPARENT   :		)
		this is a call stat.
		this is a term.
		this is an expr.
COMMA     :		,
IDENT     :		getint
		enter tab index: 262, name: &210, kind: var, type: int, value: 0, adr:11
LPARENT   :		(
		this is value para list.
RPARENT   :		)
		this is a call stat.
		this is a term.
		this is an expr.
COMMA     :		,
IDENT     :		getint
		enter tab index: 263, name: &211, kind: var, type: int, value: 0, adr:12
LPARENT   :		(
		this is value para list.
RPARENT   :		)
		this is a call stat.
		this is a term.
		this is an expr.
COMMA     :		,
IDENT     :		getint
		enter tab index: 264, name: &212, kind: var, type: int, value: 0, adr:13
LPARENT   :		(
		this is value para list.
RPARENT   :		)
		this is a call stat.
		this is a term.
		this is an expr.
		this is value para list.
RPARENT   :		)
		this is a call stat.
		this is a term.
		this is an expr.
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a one case.
CASESY    :		case
CHARCON   :		'q'
COLON     :		:
LBRACE    :		{
RETURNSY  :		return
		this is a return stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a one case.
		this is a case table.
DEFAULTSY :		default
COLON     :		:
LBRACE    :		{
PRINTFSY  :		printf
LPARENT   :		(
STRCON    :		" invalid cmd. "
RPARENT   :		)
		this is a write stat.
SEMICOLON :		;
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a default case.
		enter tab index: 265, name: &213, kind: var, type: int, value: 0, adr:14
		enter tab index: 266, name: &214, kind: var, type: int, value: 0, adr:15
		enter tab index: 267, name: &215, kind: var, type: int, value: 0, adr:16
		enter tab index: 268, name: &216, kind: var, type: int, value: 0, adr:17
		enter tab index: 269, name: &217, kind: var, type: int, value: 0, adr:18
		enter tab index: 270, name: &218, kind: var, type: int, value: 0, adr:19
RBRACE    :		}
		this is a switch stat.
		this is a stat.
		this is a stat list.
RBRACE    :		}
		this is a stat.
		this is a while stat.
		this is a stat.
		this is a stat list.
		this is complex stat.
RBRACE    :		}
		this is main func dec.
		this is a program.

		tab index: 0,	name: cintm,	kind: const,	type: int,	value: 10,	adr: 0
		tab index: 1,	name: cint1,	kind: const,	type: int,	value: 1,	adr: 1
		tab index: 2,	name: cint0,	kind: const,	type: int,	value: 0,	adr: 2
		tab index: 3,	name: cchy,	kind: const,	type: char,	value: 121,	adr: 3
		tab index: 4,	name: cchn,	kind: const,	type: char,	value: 110,	adr: 4
		tab index: 5,	name: cch0,	kind: const,	type: char,	value: 48,	adr: 5
		tab index: 6,	name: vara,	kind: var,	type: int,	value: 1,	adr: 6
		tab index: 7,	name: varm,	kind: var,	type: int,	value: 1,	adr: 7
		tab index: 8,	name: intarr,	kind: arr,	type: int,	value: 10,	adr: 8
		tab index: 9,	name: varn,	kind: var,	type: int,	value: 1,	adr: 18
		tab index: 10,	name: chara,	kind: var,	type: char,	value: 1,	adr: 19
		tab index: 11,	name: chararr,	kind: arr,	type: char,	value: 10,	adr: 20
		tab index: 12,	name: charb,	kind: var,	type: char,	value: 1,	adr: 30
		tab index: 13,	name: charc,	kind: var,	type: char,	value: 1,	adr: 31
		tab index: 14,	name: fib,	kind: func,	type: int,	value: 1,	adr: 32
		tab index: 15,	name: n,	kind: para,	type: int,	value: 0,	adr: 0
		tab index: 16,	name: &0,	kind: var,	type: int,	value: 0,	adr: 14
		tab index: 17,	name: &1,	kind: var,	type: int,	value: 0,	adr: 15
		tab index: 18,	name: &2,	kind: var,	type: int,	value: 0,	adr: 16
		tab index: 19,	name: &3,	kind: var,	type: int,	value: 0,	adr: 17
		tab index: 20,	name: &4,	kind: var,	type: int,	value: 0,	adr: 18
		tab index: 21,	name: &5,	kind: var,	type: int,	value: 0,	adr: 19
		tab index: 22,	name: &6,	kind: var,	type: int,	value: 0,	adr: 20
		tab index: 23,	name: &7,	kind: var,	type: int,	value: 0,	adr: 21
		tab index: 24,	name: &8,	kind: var,	type: int,	value: 0,	adr: 22
		tab index: 25,	name: getint,	kind: func,	type: int,	value: 0,	adr: 23
		tab index: 26,	name: temp,	kind: var,	type: int,	value: 1,	adr: 14
		tab index: 27,	name: sum,	kind: func,	type: int,	value: 5,	adr: 15
		tab index: 28,	name: a,	kind: para,	type: int,	value: 0,	adr: 0
		tab index: 29,	name: b,	kind: para,	type: int,	value: 0,	adr: 1
		tab index: 30,	name: c,	kind: para,	type: int,	value: 0,	adr: 2
		tab index: 31,	name: d,	kind: para,	type: int,	value: 0,	adr: 3
		tab index: 32,	name: e,	kind: para,	type: int,	value: 0,	adr: 4
		tab index: 33,	name: &9,	kind: var,	type: int,	value: 0,	adr: 14
		tab index: 34,	name: &10,	kind: var,	type: int,	value: 0,	adr: 15
		tab index: 35,	name: &11,	kind: var,	type: int,	value: 0,	adr: 16
		tab index: 36,	name: &12,	kind: var,	type: int,	value: 0,	adr: 17
		tab index: 37,	name: empty,	kind: func,	type: void,	value: 0,	adr: 18
		tab index: 38,	name: getch,	kind: func,	type: char,	value: 0,	adr: 14
		tab index: 39,	name: ch,	kind: var,	type: char,	value: 1,	adr: 14
		tab index: 40,	name: cal,	kind: func,	type: void,	value: 0,	adr: 15
		tab index: 41,	name: m,	kind: var,	type: int,	value: 1,	adr: 14
		tab index: 42,	name: n,	kind: var,	type: int,	value: 1,	adr: 15
		tab index: 43,	name: i,	kind: var,	type: int,	value: 1,	adr: 16
		tab index: 44,	name: op,	kind: var,	type: char,	value: 1,	adr: 17
		tab index: 45,	name: &13,	kind: var,	type: int,	value: 0,	adr: 18
		tab index: 46,	name: &14,	kind: var,	type: int,	value: 0,	adr: 19
		tab index: 47,	name: &15,	kind: var,	type: int,	value: 0,	adr: 20
		tab index: 48,	name: &16,	kind: var,	type: int,	value: 0,	adr: 21
		tab index: 49,	name: &17,	kind: var,	type: int,	value: 0,	adr: 22
		tab index: 50,	name: &18,	kind: var,	type: int,	value: 0,	adr: 23
		tab index: 51,	name: &19,	kind: var,	type: int,	value: 0,	adr: 24
		tab index: 52,	name: &20,	kind: var,	type: int,	value: 0,	adr: 25
		tab index: 53,	name: &21,	kind: var,	type: int,	value: 0,	adr: 26
		tab index: 54,	name: &22,	kind: var,	type: int,	value: 0,	adr: 27
		tab index: 55,	name: &23,	kind: var,	type: int,	value: 0,	adr: 28
		tab index: 56,	name: &24,	kind: var,	type: int,	value: 0,	adr: 29
		tab index: 57,	name: &25,	kind: var,	type: int,	value: 0,	adr: 30
		tab index: 58,	name: &26,	kind: var,	type: int,	value: 0,	adr: 31
		tab index: 59,	name: &27,	kind: var,	type: int,	value: 0,	adr: 32
		tab index: 60,	name: &28,	kind: var,	type: int,	value: 0,	adr: 33
		tab index: 61,	name: &29,	kind: var,	type: int,	value: 0,	adr: 34
		tab index: 62,	name: &30,	kind: var,	type: int,	value: 0,	adr: 35
		tab index: 63,	name: &31,	kind: var,	type: int,	value: 0,	adr: 36
		tab index: 64,	name: &32,	kind: var,	type: int,	value: 0,	adr: 37
		tab index: 65,	name: &33,	kind: var,	type: int,	value: 0,	adr: 38
		tab index: 66,	name: &34,	kind: var,	type: int,	value: 0,	adr: 39
		tab index: 67,	name: &35,	kind: var,	type: int,	value: 0,	adr: 40
		tab index: 68,	name: &36,	kind: var,	type: int,	value: 0,	adr: 41
		tab index: 69,	name: &37,	kind: var,	type: int,	value: 0,	adr: 42
		tab index: 70,	name: &38,	kind: var,	type: int,	value: 0,	adr: 43
		tab index: 71,	name: &39,	kind: var,	type: int,	value: 0,	adr: 44
		tab index: 72,	name: &40,	kind: var,	type: int,	value: 0,	adr: 45
		tab index: 73,	name: &41,	kind: var,	type: int,	value: 0,	adr: 46
		tab index: 74,	name: &42,	kind: var,	type: int,	value: 0,	adr: 47
		tab index: 75,	name: &43,	kind: var,	type: int,	value: 0,	adr: 48
		tab index: 76,	name: &44,	kind: var,	type: int,	value: 0,	adr: 49
		tab index: 77,	name: &45,	kind: var,	type: int,	value: 0,	adr: 50
		tab index: 78,	name: &46,	kind: var,	type: int,	value: 0,	adr: 51
		tab index: 79,	name: &47,	kind: var,	type: int,	value: 0,	adr: 52
		tab index: 80,	name: &48,	kind: var,	type: int,	value: 0,	adr: 53
		tab index: 81,	name: &49,	kind: var,	type: int,	value: 0,	adr: 54
		tab index: 82,	name: &50,	kind: var,	type: int,	value: 0,	adr: 55
		tab index: 83,	name: &51,	kind: var,	type: int,	value: 0,	adr: 56
		tab index: 84,	name: &52,	kind: var,	type: int,	value: 0,	adr: 57
		tab index: 85,	name: &53,	kind: var,	type: int,	value: 0,	adr: 58
		tab index: 86,	name: &54,	kind: var,	type: int,	value: 0,	adr: 59
		tab index: 87,	name: &55,	kind: var,	type: int,	value: 0,	adr: 60
		tab index: 88,	name: &56,	kind: var,	type: int,	value: 0,	adr: 61
		tab index: 89,	name: &57,	kind: var,	type: int,	value: 0,	adr: 62
		tab index: 90,	name: &58,	kind: var,	type: int,	value: 0,	adr: 63
		tab index: 91,	name: &59,	kind: var,	type: int,	value: 0,	adr: 64
		tab index: 92,	name: &60,	kind: var,	type: int,	value: 0,	adr: 65
		tab index: 93,	name: &61,	kind: var,	type: int,	value: 0,	adr: 66
		tab index: 94,	name: &62,	kind: var,	type: int,	value: 0,	adr: 67
		tab index: 95,	name: &63,	kind: var,	type: int,	value: 0,	adr: 68
		tab index: 96,	name: &64,	kind: var,	type: int,	value: 0,	adr: 69
		tab index: 97,	name: &65,	kind: var,	type: int,	value: 0,	adr: 70
		tab index: 98,	name: &66,	kind: var,	type: int,	value: 0,	adr: 71
		tab index: 99,	name: &67,	kind: var,	type: char,	value: 0,	adr: 72
		tab index: 100,	name: &68,	kind: var,	type: char,	value: 0,	adr: 73
		tab index: 101,	name: &69,	kind: var,	type: int,	value: 0,	adr: 74
		tab index: 102,	name: &70,	kind: var,	type: int,	value: 0,	adr: 75
		tab index: 103,	name: &71,	kind: var,	type: int,	value: 0,	adr: 76
		tab index: 104,	name: &72,	kind: var,	type: int,	value: 0,	adr: 77
		tab index: 105,	name: &73,	kind: var,	type: int,	value: 0,	adr: 78
		tab index: 106,	name: &74,	kind: var,	type: int,	value: 0,	adr: 79
		tab index: 107,	name: &75,	kind: var,	type: int,	value: 0,	adr: 80
		tab index: 108,	name: &76,	kind: var,	type: int,	value: 0,	adr: 81
		tab index: 109,	name: &77,	kind: var,	type: int,	value: 0,	adr: 82
		tab index: 110,	name: &78,	kind: var,	type: int,	value: 0,	adr: 83
		tab index: 111,	name: partition,	kind: func,	type: int,	value: 3,	adr: 84
		tab index: 112,	name: type,	kind: para,	type: char,	value: 0,	adr: 0
		tab index: 113,	name: low,	kind: para,	type: int,	value: 0,	adr: 1
		tab index: 114,	name: high,	kind: para,	type: int,	value: 0,	adr: 2
		tab index: 115,	name: pivot,	kind: var,	type: int,	value: 1,	adr: 14
		tab index: 116,	name: cond1,	kind: var,	type: int,	value: 1,	adr: 15
		tab index: 117,	name: cond2,	kind: var,	type: int,	value: 1,	adr: 16
		tab index: 118,	name: i,	kind: var,	type: int,	value: 1,	adr: 17
		tab index: 119,	name: chpivot,	kind: var,	type: char,	value: 1,	adr: 18
		tab index: 120,	name: &79,	kind: var,	type: int,	value: 0,	adr: 19
		tab index: 121,	name: &80,	kind: var,	type: int,	value: 0,	adr: 20
		tab index: 122,	name: &81,	kind: var,	type: char,	value: 0,	adr: 21
		tab index: 123,	name: &82,	kind: var,	type: int,	value: 0,	adr: 22
		tab index: 124,	name: &83,	kind: var,	type: int,	value: 0,	adr: 23
		tab index: 125,	name: &84,	kind: var,	type: char,	value: 0,	adr: 24
		tab index: 126,	name: &85,	kind: var,	type: int,	value: 0,	adr: 25
		tab index: 127,	name: &86,	kind: var,	type: int,	value: 0,	adr: 26
		tab index: 128,	name: &87,	kind: var,	type: int,	value: 0,	adr: 27
		tab index: 129,	name: &88,	kind: var,	type: int,	value: 0,	adr: 28
		tab index: 130,	name: &89,	kind: var,	type: int,	value: 0,	adr: 29
		tab index: 131,	name: &90,	kind: var,	type: char,	value: 0,	adr: 30
		tab index: 132,	name: &91,	kind: var,	type: int,	value: 0,	adr: 31
		tab index: 133,	name: &92,	kind: var,	type: int,	value: 0,	adr: 32
		tab index: 134,	name: &93,	kind: var,	type: int,	value: 0,	adr: 33
		tab index: 135,	name: &94,	kind: var,	type: int,	value: 0,	adr: 34
		tab index: 136,	name: &95,	kind: var,	type: int,	value: 0,	adr: 35
		tab index: 137,	name: &96,	kind: var,	type: char,	value: 0,	adr: 36
		tab index: 138,	name: &97,	kind: var,	type: int,	value: 0,	adr: 37
		tab index: 139,	name: &98,	kind: var,	type: int,	value: 0,	adr: 38
		tab index: 140,	name: &99,	kind: var,	type: int,	value: 0,	adr: 39
		tab index: 141,	name: &100,	kind: var,	type: int,	value: 0,	adr: 40
		tab index: 142,	name: &101,	kind: var,	type: int,	value: 0,	adr: 41
		tab index: 143,	name: &102,	kind: var,	type: int,	value: 0,	adr: 42
		tab index: 144,	name: &103,	kind: var,	type: int,	value: 0,	adr: 43
		tab index: 145,	name: &104,	kind: var,	type: int,	value: 0,	adr: 44
		tab index: 146,	name: &105,	kind: var,	type: int,	value: 0,	adr: 45
		tab index: 147,	name: &106,	kind: var,	type: int,	value: 0,	adr: 46
		tab index: 148,	name: &107,	kind: var,	type: int,	value: 0,	adr: 47
		tab index: 149,	name: &108,	kind: var,	type: char,	value: 0,	adr: 48
		tab index: 150,	name: &109,	kind: var,	type: int,	value: 0,	adr: 49
		tab index: 151,	name: &110,	kind: var,	type: int,	value: 0,	adr: 50
		tab index: 152,	name: &111,	kind: var,	type: int,	value: 0,	adr: 51
		tab index: 153,	name: &112,	kind: var,	type: int,	value: 0,	adr: 52
		tab index: 154,	name: &113,	kind: var,	type: int,	value: 0,	adr: 53
		tab index: 155,	name: &114,	kind: var,	type: char,	value: 0,	adr: 54
		tab index: 156,	name: &115,	kind: var,	type: int,	value: 0,	adr: 55
		tab index: 157,	name: &116,	kind: var,	type: int,	value: 0,	adr: 56
		tab index: 158,	name: &117,	kind: var,	type: int,	value: 0,	adr: 57
		tab index: 159,	name: &118,	kind: var,	type: char,	value: 0,	adr: 58
		tab index: 160,	name: &119,	kind: var,	type: int,	value: 0,	adr: 59
		tab index: 161,	name: &120,	kind: var,	type: int,	value: 0,	adr: 60
		tab index: 162,	name: &121,	kind: var,	type: char,	value: 0,	adr: 61
		tab index: 163,	name: &122,	kind: var,	type: int,	value: 0,	adr: 62
		tab index: 164,	name: &123,	kind: var,	type: int,	value: 0,	adr: 63
		tab index: 165,	name: &124,	kind: var,	type: int,	value: 0,	adr: 64
		tab index: 166,	name: &125,	kind: var,	type: int,	value: 0,	adr: 65
		tab index: 167,	name: &126,	kind: var,	type: int,	value: 0,	adr: 66
		tab index: 168,	name: &127,	kind: var,	type: char,	value: 0,	adr: 67
		tab index: 169,	name: &128,	kind: var,	type: int,	value: 0,	adr: 68
		tab index: 170,	name: &129,	kind: var,	type: int,	value: 0,	adr: 69
		tab index: 171,	name: &130,	kind: var,	type: int,	value: 0,	adr: 70
		tab index: 172,	name: &131,	kind: var,	type: int,	value: 0,	adr: 71
		tab index: 173,	name: &132,	kind: var,	type: int,	value: 0,	adr: 72
		tab index: 174,	name: &133,	kind: var,	type: char,	value: 0,	adr: 73
		tab index: 175,	name: &134,	kind: var,	type: int,	value: 0,	adr: 74
		tab index: 176,	name: &135,	kind: var,	type: int,	value: 0,	adr: 75
		tab index: 177,	name: &136,	kind: var,	type: int,	value: 0,	adr: 76
		tab index: 178,	name: &137,	kind: var,	type: int,	value: 0,	adr: 77
		tab index: 179,	name: &138,	kind: var,	type: int,	value: 0,	adr: 78
		tab index: 180,	name: &139,	kind: var,	type: int,	value: 0,	adr: 79
		tab index: 181,	name: &140,	kind: var,	type: int,	value: 0,	adr: 80
		tab index: 182,	name: &141,	kind: var,	type: int,	value: 0,	adr: 81
		tab index: 183,	name: &142,	kind: var,	type: int,	value: 0,	adr: 82
		tab index: 184,	name: &143,	kind: var,	type: int,	value: 0,	adr: 83
		tab index: 185,	name: &144,	kind: var,	type: int,	value: 0,	adr: 84
		tab index: 186,	name: &145,	kind: var,	type: char,	value: 0,	adr: 85
		tab index: 187,	name: &146,	kind: var,	type: int,	value: 0,	adr: 86
		tab index: 188,	name: &147,	kind: var,	type: int,	value: 0,	adr: 87
		tab index: 189,	name: &148,	kind: var,	type: int,	value: 0,	adr: 88
		tab index: 190,	name: &149,	kind: var,	type: int,	value: 0,	adr: 89
		tab index: 191,	name: &150,	kind: var,	type: int,	value: 0,	adr: 90
		tab index: 192,	name: &151,	kind: var,	type: char,	value: 0,	adr: 91
		tab index: 193,	name: &152,	kind: var,	type: int,	value: 0,	adr: 92
		tab index: 194,	name: &153,	kind: var,	type: int,	value: 0,	adr: 93
		tab index: 195,	name: &154,	kind: var,	type: int,	value: 0,	adr: 94
		tab index: 196,	name: &155,	kind: var,	type: char,	value: 0,	adr: 95
		tab index: 197,	name: &156,	kind: var,	type: int,	value: 0,	adr: 96
		tab index: 198,	name: &157,	kind: var,	type: int,	value: 0,	adr: 97
		tab index: 199,	name: &158,	kind: var,	type: char,	value: 0,	adr: 98
		tab index: 200,	name: &159,	kind: var,	type: char,	value: 0,	adr: 99
		tab index: 201,	name: &160,	kind: var,	type: int,	value: 0,	adr: 100
		tab index: 202,	name: qsort,	kind: func,	type: void,	value: 3,	adr: 101
		tab index: 203,	name: type,	kind: para,	type: char,	value: 0,	adr: 0
		tab index: 204,	name: low,	kind: para,	type: int,	value: 0,	adr: 1
		tab index: 205,	name: high,	kind: para,	type: int,	value: 0,	adr: 2
		tab index: 206,	name: loc,	kind: var,	type: int,	value: 1,	adr: 14
		tab index: 207,	name: &161,	kind: var,	type: int,	value: 0,	adr: 15
		tab index: 208,	name: &162,	kind: var,	type: int,	value: 0,	adr: 16
		tab index: 209,	name: &163,	kind: var,	type: int,	value: 0,	adr: 17
		tab index: 210,	name: &164,	kind: var,	type: int,	value: 0,	adr: 18
		tab index: 211,	name: &165,	kind: var,	type: int,	value: 0,	adr: 19
		tab index: 212,	name: &166,	kind: var,	type: int,	value: 0,	adr: 20
		tab index: 213,	name: &167,	kind: var,	type: int,	value: 0,	adr: 21
		tab index: 214,	name: arr,	kind: func,	type: void,	value: 0,	adr: 22
		tab index: 215,	name: i,	kind: var,	type: int,	value: 1,	adr: 14
		tab index: 216,	name: type,	kind: var,	type: char,	value: 1,	adr: 15
		tab index: 217,	name: &168,	kind: var,	type: char,	value: 0,	adr: 16
		tab index: 218,	name: &169,	kind: var,	type: int,	value: 0,	adr: 17
		tab index: 219,	name: &170,	kind: var,	type: int,	value: 0,	adr: 18
		tab index: 220,	name: &171,	kind: var,	type: int,	value: 0,	adr: 19
		tab index: 221,	name: &172,	kind: var,	type: int,	value: 0,	adr: 20
		tab index: 222,	name: &173,	kind: var,	type: int,	value: 0,	adr: 21
		tab index: 223,	name: &174,	kind: var,	type: int,	value: 0,	adr: 22
		tab index: 224,	name: &175,	kind: var,	type: int,	value: 0,	adr: 23
		tab index: 225,	name: &176,	kind: var,	type: char,	value: 0,	adr: 24
		tab index: 226,	name: &177,	kind: var,	type: int,	value: 0,	adr: 25
		tab index: 227,	name: &178,	kind: var,	type: int,	value: 0,	adr: 26
		tab index: 228,	name: &179,	kind: var,	type: int,	value: 0,	adr: 27
		tab index: 229,	name: &180,	kind: var,	type: int,	value: 0,	adr: 28
		tab index: 230,	name: &181,	kind: var,	type: int,	value: 0,	adr: 29
		tab index: 231,	name: &182,	kind: var,	type: int,	value: 0,	adr: 30
		tab index: 232,	name: &183,	kind: var,	type: int,	value: 0,	adr: 31
		tab index: 233,	name: &184,	kind: var,	type: int,	value: 0,	adr: 32
		tab index: 234,	name: &185,	kind: var,	type: char,	value: 0,	adr: 33
		tab index: 235,	name: &186,	kind: var,	type: int,	value: 0,	adr: 34
		tab index: 236,	name: &187,	kind: var,	type: int,	value: 0,	adr: 35
		tab index: 237,	name: &188,	kind: var,	type: int,	value: 0,	adr: 36
		tab index: 238,	name: &189,	kind: var,	type: int,	value: 0,	adr: 37
		tab index: 239,	name: &190,	kind: var,	type: char,	value: 0,	adr: 38
		tab index: 240,	name: &191,	kind: var,	type: int,	value: 0,	adr: 39
		tab index: 241,	name: &192,	kind: var,	type: int,	value: 0,	adr: 40
		tab index: 242,	name: &193,	kind: var,	type: char,	value: 0,	adr: 41
		tab index: 243,	name: &194,	kind: var,	type: int,	value: 0,	adr: 42
		tab index: 244,	name: &195,	kind: var,	type: int,	value: 0,	adr: 43
		tab index: 245,	name: &196,	kind: var,	type: int,	value: 0,	adr: 44
		tab index: 246,	name: &197,	kind: var,	type: int,	value: 0,	adr: 45
		tab index: 247,	name: &198,	kind: var,	type: int,	value: 0,	adr: 46
		tab index: 248,	name: &199,	kind: var,	type: char,	value: 0,	adr: 47
		tab index: 249,	name: &200,	kind: var,	type: int,	value: 0,	adr: 48
		tab index: 250,	name: &201,	kind: var,	type: int,	value: 0,	adr: 49
		tab index: 251,	name: main,	kind: func,	type: void,	value: 0,	adr: 50
		tab index: 252,	name: cmd,	kind: var,	type: char,	value: 1,	adr: 1
		tab index: 253,	name: n,	kind: var,	type: int,	value: 1,	adr: 2
		tab index: 254,	name: &202,	kind: var,	type: char,	value: 0,	adr: 3
		tab index: 255,	name: &203,	kind: var,	type: char,	value: 0,	adr: 4
		tab index: 256,	name: &204,	kind: var,	type: int,	value: 0,	adr: 5
		tab index: 257,	name: &205,	kind: var,	type: int,	value: 0,	adr: 6
		tab index: 258,	name: &206,	kind: var,	type: int,	value: 0,	adr: 7
		tab index: 259,	name: &207,	kind: var,	type: int,	value: 0,	adr: 8
		tab index: 260,	name: &208,	kind: var,	type: int,	value: 0,	adr: 9
		tab index: 261,	name: &209,	kind: var,	type: int,	value: 0,	adr: 10
		tab index: 262,	name: &210,	kind: var,	type: int,	value: 0,	adr: 11
		tab index: 263,	name: &211,	kind: var,	type: int,	value: 0,	adr: 12
		tab index: 264,	name: &212,	kind: var,	type: int,	value: 0,	adr: 13
		tab index: 265,	name: &213,	kind: var,	type: int,	value: 0,	adr: 14
		tab index: 266,	name: &214,	kind: var,	type: int,	value: 0,	adr: 15
		tab index: 267,	name: &215,	kind: var,	type: int,	value: 0,	adr: 16
		tab index: 268,	name: &216,	kind: var,	type: int,	value: 0,	adr: 17
		tab index: 269,	name: &217,	kind: var,	type: int,	value: 0,	adr: 18
		tab index: 270,	name: &218,	kind: var,	type: int,	value: 0,	adr: 19
		btab index: 0,	name: fib,	tidx: 14
		btab index: 1,	name: getint,	tidx: 25
		btab index: 2,	name: sum,	tidx: 27
		btab index: 3,	name: empty,	tidx: 37
		btab index: 4,	name: getch,	tidx: 38
		btab index: 5,	name: cal,	tidx: 40
		btab index: 6,	name: partition,	tidx: 111
		btab index: 7,	name: qsort,	tidx: 202
		btab index: 8,	name: arr,	tidx: 214
		btab index: 9,	name: main,	tidx: 251
    0               conOp                 int                  10               cintm
    1               conOp                 int                   1               cint1
    2               conOp                 int                   0               cint0
    3               conOp                char                 121                cchy
    4               conOp                char                 110                cchn
    5               conOp                char                  48                cch0
    6               varOp                 int                                    vara
    7               varOp                 int                                    varm
    8               arrOp                 int                  10              intarr
    9               varOp                 int                                    varn
   10               varOp                char                                   chara
   11               arrOp                char                  10             chararr
   12               varOp                char                                   charb
   13               varOp                char                                   charc
   14               funOp                 int                   1                 fib
   15              paraOp                 int                                       n
   16               sleOp                   n               cint0                  &0
   17               brfOp                  &0                                  0label
   18               retOp                                                       cint0
   19                 jOp                                                      1label
   20               genOp                                                      0label
   21               genOp                                                      1label
   22               seqOp                   n               cint1                  &1
   23               brfOp                  &1                                  2label
   24               retOp                                                       cint1
   25                 jOp                                                      3label
   26               genOp                                                      2label
   27               genOp                                                      3label
   28                liop                   1                                      &3
   29               subOp                   n                  &3                  &4
   30             calPaOp                                                          &4
   31              callOp                  &2                   1                 fib
   32                liop                   2                                      &6
   33               subOp                   n                  &6                  &7
   34             calPaOp                                                          &7
   35              callOp                  &5                   1                 fib
   36               addOp                  &2                  &5                  &8
   37               retOp                                                          &8
   38            endFunOp                                                         fib
   39               funOp                 int                   0              getint
   40               varOp                 int                                    temp
   41             writeOp                        " input a num: "                    
   42              readOp                                                        temp
   43               retOp                                                        temp
   44            endFunOp                                                      getint
   45               funOp                 int                   5                 sum
   46              paraOp                 int                                       a
   47              paraOp                 int                                       b
   48              paraOp                 int                                       c
   49              paraOp                 int                                       d
   50              paraOp                 int                                       e
   51               addOp                   a                   b                  &9
   52               addOp                  &9                   c                 &10
   53               addOp                 &10                   d                 &11
   54               addOp                 &11                   e                 &12
   55               retOp                                                         &12
   56            endFunOp                                                         sum
   57               funOp                void                   0               empty
   58            endFunOp                                                       empty
   59               funOp                char                   0               getch
   60               varOp                char                                      ch
   61             writeOp                       " input a char: "                    
   62              readOp                                                          ch
   63               retOp                                                          ch
   64            endFunOp                                                       getch
   65               funOp                void                   0                 cal
   66               varOp                 int                                       m
   67               varOp                 int                                       n
   68               varOp                 int                                       i
   69               varOp                char                                      op
   70             writeOp                        "globol const: "                    
   71             writeOp                               " cint0 "               cint0
   72             writeOp                               " cint1 "               cint1
   73             writeOp                                " cchy "                cchy
   74             writeOp                                " cchn "                cchn
   75             writeOp                                " cch0 "                cch0
   76             writeOp                    "read global var, three int three char:"                    
   77              readOp                                                        vara
   78              readOp                                                        varm
   79              readOp                                                        varn
   80              readOp                                                       chara
   81              readOp                                                       charb
   82              readOp                                                       charc
   83             writeOp                                " var1 "                vara
   84             writeOp                                " var2 "                varm
   85             writeOp                                " var3 "                varn
   86             writeOp                               " char1 "               chara
   87             writeOp                               " char2 "               charb
   88             writeOp                               " char3 "               charc
   89             calPaOp                                                        vara
   90             calPaOp                                                        varm
   91             calPaOp                                                        varn
   92                liop                   0                                     &14
   93             calPaOp                                                         &14
   94                liop                   0                                     &15
   95             calPaOp                                                         &15
   96              callOp                 &13                   5                 sum
   97             writeOp                     " sum of var int: "                 &13
   98             writeOp                          " some expr: "                    
   99                liop                 -10                                     &16
  100               subOp                   0                 &16                 &17
  101             writeOp                          " exp1 --10: "                 &17
  102                liop                  10                                     &18
  103                liop                  10                                     &19
  104               subOp                   0                 &19                 &20
  105                liop                  -4                                     &21
  106               subOp                 &20                 &21                 &22
  107               mulOp                 &18                 &22                 &23
  108                liop                   4                                     &24
  109               divOp                 &23                 &24                 &25
  110               subOp                   0                 &25                 &26
  111                liop                   1                                     &27
  112                liop                  -9                                     &28
  113               mulOp                 &27                 &28                 &29
  114               addOp                 &26                 &29                 &30
  115                liop                  -6                                     &31
  116                liop                  -3                                     &32
  117               divOp                 &31                 &32                 &33
  118               subOp                 &30                 &33                 &34
  119             writeOp                    " exp2 -10*(-10--4)/4++1*-9--6/-3: "                 &34
  120                liop                   4                                     &37
  121             calPaOp                                                         &37
  122              callOp                 &36                   1                 fib
  123                liop                  -1                                     &38
  124               addOp                 &36                 &38                 &39
  125             calPaOp                                                         &39
  126              callOp                 &35                   1                 fib
  127               subOp                   0                 &35                 &40
  128                liop                   1                                     &41
  129               subOp                 &40                 &41                 &42
  130             writeOp                    " exp3 -fib(fib(+4)+-1)-+1: "                 &42
  131             writeOp                       " expr with arr "                    
  132                liop                   0                                     &43
  133            becomeOp                 &43                                       i
  134             writeOp                             " set arr "                    
  135               genOp                                                      4label
  136                liop                   5                                     &44
  137               sltOp                   i                 &44                 &45
  138               brfOp                 &45                                  5label
  139             calPaOp                                                           i
  140              callOp                 &47                   1                 fib
  141                liop                   2                                     &48
  142               addOp                 &47                 &48                 &49
  143             calPaOp                                                         &49
  144              callOp                 &46                   1                 fib
  145                liop                   1                                     &50
  146               addOp                   i                 &50                 &51
  147               mulOp                 &46                 &51                 &52
  148            setArrOp                 &52                   i              intarr
  149            getArrOp              intarr                   i                 &53
  150             writeOp                                     " "                 &53
  151                liop                   1                                     &54
  152               addOp                   i                 &54                 &55
  153            becomeOp                 &55                                       i
  154                 jOp                                                      4label
  155               genOp                                                      5label
  156                liop                   3                                     &57
  157            getArrOp              intarr                 &57                 &58
  158             calPaOp                                                         &58
  159              callOp                 &56                   1                 fib
  160             writeOp                      " fib(intarr[3]) "                 &56
  161                liop                   2                                     &60
  162             calPaOp                                                         &60
  163              callOp                 &59                   1                 fib
  164            getArrOp              intarr                 &59                 &61
  165             writeOp                      " intarr[fib(2)] "                 &61
  166                liop                   2                                     &62
  167            getArrOp              intarr                 &62                 &63
  168                liop                   2                                     &64
  169               subOp                 &63                 &64                 &65
  170            getArrOp              intarr                 &65                 &66
  171             writeOp                    " intarr[intarr[2]-2] "                 &66
  172             writeOp                          "input arg1: "                    
  173              readOp                                                           m
  174                liop                  43                                     &67
  175            becomeOp                 &67                                      op
  176               genOp                                                      6label
  177                liop                 113                                     &68
  178               sneOp                  op                 &68                 &69
  179               brfOp                 &69                                 14label
  180             writeOp                    " input op:(+-*/)(q:end) "                    
  181              readOp                                                          op
  182                 jOp                                                     12label
  183               genOp                                                      7label
  184             writeOp                           " input arg2"                    
  185              readOp                                                           n
  186               addOp                   m                   n                 &70
  187            becomeOp                 &70                                       m
  188                 jOp                                                     13label
  189               genOp                                                      8label
  190             writeOp                           " input arg2"                    
  191              readOp                                                           n
  192               mulOp                   m                   n                 &71
  193            becomeOp                 &71                                       m
  194                 jOp                                                     13label
  195               genOp                                                      9label
  196             writeOp                           " input arg2"                    
  197              readOp                                                           n
  198               subOp                   m                   n                 &72
  199            becomeOp                 &72                                       m
  200                 jOp                                                     13label
  201               genOp                                                     10label
  202             writeOp                           " input arg2"                    
  203              readOp                                                           n
  204               divOp                   m                   n                 &73
  205            becomeOp                 &73                                       m
  206                 jOp                                                     13label
  207               genOp                                                     11label
  208               retOp                                                            
  209                 jOp                                                     13label
  210               genOp                                                     12label
  211               sneOp                  43                  op                 &74
  212               brfOp                 &74                                  7label
  213               sneOp                  42                  op                 &75
  214               brfOp                 &75                                  8label
  215               sneOp                  45                  op                 &76
  216               brfOp                 &76                                  9label
  217               sneOp                  47                  op                 &77
  218               brfOp                 &77                                 10label
  219               sneOp                 113                  op                 &78
  220               brfOp                 &78                                 11label
  221               genOp                                                     13label
  222             writeOp                              "result: "                   m
  223                 jOp                                                      6label
  224               genOp                                                     14label
  225            endFunOp                                                         cal
  226               funOp                 int                   3           partition
  227              paraOp                char                                    type
  228              paraOp                 int                                     low
  229              paraOp                 int                                    high
  230               varOp                 int                                   pivot
  231               varOp                 int                                   cond1
  232               varOp                 int                                   cond2
  233               varOp                 int                                       i
  234               varOp                char                                 chpivot
  235                liop                   0                                     &79
  236            becomeOp                 &79                                   cond1
  237                liop                   0                                     &80
  238            becomeOp                 &80                                   cond2
  239                liop                 105                                     &81
  240               seqOp                type                 &81                 &82
  241               brfOp                 &82                                 15label
  242            getArrOp              intarr                 low                 &83
  243            becomeOp                 &83                                   pivot
  244                 jOp                                                     16label
  245               genOp                                                     15label
  246            getArrOp             chararr                 low                 &84
  247            becomeOp                 &84                                 chpivot
  248               genOp                                                     16label
  249               genOp                                                     17label
  250               sltOp                 low                high                 &85
  251               brfOp                 &85                                 58label
  252                liop                   0                                     &86
  253            becomeOp                 &86                                       i
  254               sltOp                 low                high                 &87
  255               brfOp                 &87                                 18label
  256                liop                   1                                     &88
  257            becomeOp                 &88                                   cond1
  258                 jOp                                                     19label
  259               genOp                                                     18label
  260                liop                   0                                     &89
  261            becomeOp                 &89                                   cond1
  262               genOp                                                     19label
  263                liop                 105                                     &90
  264               seqOp                type                 &90                 &91
  265               brfOp                 &91                                 22label
  266            getArrOp              intarr                high                 &92
  267               sgeOp                 &92               pivot                 &93
  268               brfOp                 &93                                 20label
  269                liop                   1                                     &94
  270            becomeOp                 &94                                   cond2
  271                 jOp                                                     21label
  272               genOp                                                     20label
  273                liop                   0                                     &95
  274            becomeOp                 &95                                   cond2
  275               genOp                                                     21label
  276                 jOp                                                     25label
  277               genOp                                                     22label
  278            getArrOp             chararr                high                 &96
  279               sgeOp                 &96             chpivot                 &97
  280               brfOp                 &97                                 23label
  281                liop                   1                                     &98
  282            becomeOp                 &98                                   cond2
  283                 jOp                                                     24label
  284               genOp                                                     23label
  285                liop                   0                                     &99
  286            becomeOp                 &99                                   cond2
  287               genOp                                                     24label
  288               genOp                                                     25label
  289               genOp                                                     26label
  290               addOp               cond1               cond2                &100
  291                liop                   2                                    &101
  292               seqOp                &100                &101                &102
  293               brfOp                &102                                 35label
  294                liop                   1                                    &103
  295               subOp                high                &103                &104
  296            becomeOp                &104                                    high
  297               sltOp                 low                high                &105
  298               brfOp                &105                                 27label
  299                liop                   1                                    &106
  300            becomeOp                &106                                   cond1
  301                 jOp                                                     28label
  302               genOp                                                     27label
  303                liop                   0                                    &107
  304            becomeOp                &107                                   cond1
  305               genOp                                                     28label
  306                liop                 105                                    &108
  307               seqOp                type                &108                &109
  308               brfOp                &109                                 31label
  309            getArrOp              intarr                high                &110
  310               sgeOp                &110               pivot                &111
  311               brfOp                &111                                 29label
  312                liop                   1                                    &112
  313            becomeOp                &112                                   cond2
  314                 jOp                                                     30label
  315               genOp                                                     29label
  316                liop                   0                                    &113
  317            becomeOp                &113                                   cond2
  318               genOp                                                     30label
  319                 jOp                                                     34label
  320               genOp                                                     31label
  321            getArrOp             chararr                high                &114
  322               sgeOp                &114             chpivot                &115
  323               brfOp                &115                                 32label
  324                liop                   1                                    &116
  325            becomeOp                &116                                   cond2
  326                 jOp                                                     33label
  327               genOp                                                     32label
  328                liop                   0                                    &117
  329            becomeOp                &117                                   cond2
  330               genOp                                                     33label
  331               genOp                                                     34label
  332                 jOp                                                     26label
  333               genOp                                                     35label
  334                liop                 105                                    &118
  335               seqOp                type                &118                &119
  336               brfOp                &119                                 36label
  337            getArrOp              intarr                high                &120
  338            setArrOp                &120                 low              intarr
  339                 jOp                                                     37label
  340               genOp                                                     36label
  341            getArrOp             chararr                high                &121
  342            setArrOp                &121                 low             chararr
  343               genOp                                                     37label
  344                liop                   0                                    &122
  345            becomeOp                &122                                   cond1
  346                liop                   0                                    &123
  347            becomeOp                &123                                   cond2
  348               sltOp                 low                high                &124
  349               brfOp                &124                                 38label
  350                liop                   1                                    &125
  351            becomeOp                &125                                   cond1
  352                 jOp                                                     39label
  353               genOp                                                     38label
  354                liop                   0                                    &126
  355            becomeOp                &126                                   cond1
  356               genOp                                                     39label
  357                liop                 105                                    &127
  358               seqOp                type                &127                &128
  359               brfOp                &128                                 42label
  360            getArrOp              intarr                 low                &129
  361               sleOp                &129               pivot                &130
  362               brfOp                &130                                 40label
  363                liop                   1                                    &131
  364            becomeOp                &131                                   cond2
  365                 jOp                                                     41label
  366               genOp                                                     40label
  367                liop                   0                                    &132
  368            becomeOp                &132                                   cond2
  369               genOp                                                     41label
  370                 jOp                                                     45label
  371               genOp                                                     42label
  372            getArrOp             chararr                 low                &133
  373               sleOp                &133             chpivot                &134
  374               brfOp                &134                                 43label
  375                liop                   1                                    &135
  376            becomeOp                &135                                   cond2
  377                 jOp                                                     44label
  378               genOp                                                     43label
  379                liop                   0                                    &136
  380            becomeOp                &136                                   cond2
  381               genOp                                                     44label
  382               genOp                                                     45label
  383               genOp                                                     46label
  384               addOp               cond1               cond2                &137
  385                liop                   2                                    &138
  386               seqOp                &137                &138                &139
  387               brfOp                &139                                 55label
  388                liop                   1                                    &140
  389               addOp                 low                &140                &141
  390            becomeOp                &141                                     low
  391               sltOp                 low                high                &142
  392               brfOp                &142                                 47label
  393                liop                   1                                    &143
  394            becomeOp                &143                                   cond1
  395                 jOp                                                     48label
  396               genOp                                                     47label
  397                liop                   0                                    &144
  398            becomeOp                &144                                   cond1
  399               genOp                                                     48label
  400                liop                 105                                    &145
  401               seqOp                type                &145                &146
  402               brfOp                &146                                 51label
  403            getArrOp              intarr                 low                &147
  404               sleOp                &147               pivot                &148
  405               brfOp                &148                                 49label
  406                liop                   1                                    &149
  407            becomeOp                &149                                   cond2
  408                 jOp                                                     50label
  409               genOp                                                     49label
  410                liop                   0                                    &150
  411            becomeOp                &150                                   cond2
  412               genOp                                                     50label
  413                 jOp                                                     54label
  414               genOp                                                     51label
  415            getArrOp             chararr                 low                &151
  416               sleOp                &151             chpivot                &152
  417               brfOp                &152                                 52label
  418                liop                   1                                    &153
  419            becomeOp                &153                                   cond2
  420                 jOp                                                     53label
  421               genOp                                                     52label
  422                liop                   0                                    &154
  423            becomeOp                &154                                   cond2
  424               genOp                                                     53label
  425               genOp                                                     54label
  426                 jOp                                                     46label
  427               genOp                                                     55label
  428                liop                 105                                    &155
  429               seqOp                type                &155                &156
  430               brfOp                &156                                 56label
  431            getArrOp              intarr                 low                &157
  432            setArrOp                &157                high              intarr
  433                 jOp                                                     57label
  434               genOp                                                     56label
  435            getArrOp             chararr                 low                &158
  436            setArrOp                &158                high             chararr
  437               genOp                                                     57label
  438                 jOp                                                     17label
  439               genOp                                                     58label
  440                liop                 105                                    &159
  441               seqOp                type                &159                &160
  442               brfOp                &160                                 59label
  443            setArrOp               pivot                 low              intarr
  444                 jOp                                                     60label
  445               genOp                                                     59label
  446            setArrOp             chpivot                 low             chararr
  447               genOp                                                     60label
  448               retOp                                                         low
  449            endFunOp                                                   partition
  450               funOp                void                   3               qsort
  451              paraOp                char                                    type
  452              paraOp                 int                                     low
  453              paraOp                 int                                    high
  454               varOp                 int                                     loc
  455                liop                   0                                    &161
  456            becomeOp                &161                                     loc
  457               sltOp                 low                high                &162
  458               brfOp                &162                                 61label
  459             calPaOp                                                        type
  460             calPaOp                                                         low
  461             calPaOp                                                        high
  462              callOp                &163                   3           partition
  463            becomeOp                &163                                     loc
  464             calPaOp                                                        type
  465             calPaOp                                                         low
  466                liop                   1                                    &164
  467               subOp                 loc                &164                &165
  468             calPaOp                                                        &165
  469              callOp                                       3               qsort
  470             calPaOp                                                        type
  471                liop                   1                                    &166
  472               addOp                 loc                &166                &167
  473             calPaOp                                                        &167
  474             calPaOp                                                        high
  475              callOp                                       3               qsort
  476                 jOp                                                     62label
  477               genOp                                                     61label
  478               genOp                                                     62label
  479               retOp                                                            
  480            endFunOp                                                       qsort
  481               funOp                void                   0                 arr
  482               varOp                 int                                       i
  483               varOp                char                                    type
  484             writeOp                    " int arr(i) or char arr(c)? input i or c "                    
  485              readOp                                                        type
  486                liop                 105                                    &168
  487               seqOp                type                &168                &169
  488               brfOp                &169                                 67label
  489             writeOp                    " input int arr content to sort. "                    
  490                liop                   0                                    &170
  491            becomeOp                &170                                       i
  492               genOp                                                     63label
  493                liop                  10                                    &171
  494               sltOp                   i                &171                &172
  495               brfOp                &172                                 64label
  496              callOp                &173                   0              getint
  497            setArrOp                &173                   i              intarr
  498                liop                   1                                    &174
  499               addOp                   i                &174                &175
  500            becomeOp                &175                                       i
  501                 jOp                                                     63label
  502               genOp                                                     64label
  503                liop                 105                                    &176
  504             calPaOp                                                        &176
  505                liop                   0                                    &177
  506             calPaOp                                                        &177
  507                liop                   9                                    &178
  508             calPaOp                                                        &178
  509              callOp                                       3               qsort
  510             writeOp                     " int after sort: "                    
  511                liop                   0                                    &179
  512            becomeOp                &179                                       i
  513               genOp                                                     65label
  514                liop                  10                                    &180
  515               sltOp                   i                &180                &181
  516               brfOp                &181                                 66label
  517            getArrOp              intarr                   i                &182
  518             writeOp                                     " "                &182
  519                liop                   1                                    &183
  520               addOp                   i                &183                &184
  521            becomeOp                &184                                       i
  522                 jOp                                                     65label
  523               genOp                                                     66label
  524                 jOp                                                     74label
  525               genOp                                                     67label
  526                liop                  99                                    &185
  527               seqOp                type                &185                &186
  528               brfOp                &186                                 72label
  529             writeOp                    " input char arr content to sort. "                    
  530                liop                   0                                    &187
  531            becomeOp                &187                                       i
  532               genOp                                                     68label
  533                liop                  10                                    &188
  534               sltOp                   i                &188                &189
  535               brfOp                &189                                 69label
  536              callOp                &190                   0               getch
  537            setArrOp                &190                   i             chararr
  538                liop                   1                                    &191
  539               addOp                   i                &191                &192
  540            becomeOp                &192                                       i
  541                 jOp                                                     68label
  542               genOp                                                     69label
  543                liop                  99                                    &193
  544             calPaOp                                                        &193
  545                liop                   0                                    &194
  546             calPaOp                                                        &194
  547                liop                   9                                    &195
  548             calPaOp                                                        &195
  549              callOp                                       3               qsort
  550             writeOp                    " char after sort: "                    
  551                liop                   0                                    &196
  552            becomeOp                &196                                       i
  553               genOp                                                     70label
  554                liop                  10                                    &197
  555               sltOp                   i                &197                &198
  556               brfOp                &198                                 71label
  557            getArrOp             chararr                   i                &199
  558             writeOp                                     " "                &199
  559                liop                   1                                    &200
  560               addOp                   i                &200                &201
  561            becomeOp                &201                                       i
  562                 jOp                                                     70label
  563               genOp                                                     71label
  564                 jOp                                                     73label
  565               genOp                                                     72label
  566             writeOp                      " invalid input. "                    
  567               genOp                                                     73label
  568               genOp                                                     74label
  569               retOp                                                            
  570            endFunOp                                                         arr
  571               funOp                void                   0                main
  572               varOp                char                                     cmd
  573               varOp                 int                                       n
  574                liop                  43                                    &202
  575            becomeOp                &202                                     cmd
  576               genOp                                                     75label
  577                liop                 113                                    &203
  578               sneOp                 cmd                &203                &204
  579               brfOp                &204                                 85label
  580             writeOp                    " input cmd: a:arr,c:cal,e:empty,f:fib,s:sum,q:quit "                    
  581              readOp                                                         cmd
  582                 jOp                                                     83label
  583               genOp                                                     76label
  584              callOp                                       0                 arr
  585                 jOp                                                     84label
  586               genOp                                                     77label
  587              callOp                                       0                 cal
  588                 jOp                                                     84label
  589               genOp                                                     78label
  590              callOp                                       0               empty
  591                 jOp                                                     84label
  592               genOp                                                     79label
  593              callOp                &206                   0              getint
  594             calPaOp                                                        &206
  595              callOp                &205                   1                 fib
  596             writeOp                                                        &205
  597                 jOp                                                     84label
  598               genOp                                                     80label
  599              callOp                &208                   0              getint
  600             calPaOp                                                        &208
  601              callOp                &209                   0              getint
  602             calPaOp                                                        &209
  603              callOp                &210                   0              getint
  604             calPaOp                                                        &210
  605              callOp                &211                   0              getint
  606             calPaOp                                                        &211
  607              callOp                &212                   0              getint
  608             calPaOp                                                        &212
  609              callOp                &207                   5                 sum
  610             writeOp                                                        &207
  611                 jOp                                                     84label
  612               genOp                                                     81label
  613               retOp                                                            
  614                 jOp                                                     84label
  615               genOp                                                     82label
  616             writeOp                        " invalid cmd. "                    
  617                 jOp                                                     84label
  618               genOp                                                     83label
  619               sneOp                  97                 cmd                &213
  620               brfOp                &213                                 76label
  621               sneOp                  99                 cmd                &214
  622               brfOp                &214                                 77label
  623               sneOp                 101                 cmd                &215
  624               brfOp                &215                                 78label
  625               sneOp                 102                 cmd                &216
  626               brfOp                &216                                 79label
  627               sneOp                 115                 cmd                &217
  628               brfOp                &217                                 80label
  629               sneOp                 113                 cmd                &218
  630               brfOp                &218                                 81label
  631                 jOp                                                     82label
  632               genOp                                                     84label
  633                 jOp                                                     75label
  634               genOp                                                     85label
  635            endFunOp                                                        varn
